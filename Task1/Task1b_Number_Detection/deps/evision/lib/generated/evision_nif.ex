defmodule :evision_nif do

  @moduledoc false
  @on_load :load_nif
  def load_nif do
    require Logger
    nif_file = '#{:code.priv_dir(:evision)}/evision'
    :ok = 
      case :os.type() do
        {:win32, _} -> DLLLoaderHelper.addDLLDirectory("#{:code.priv_dir(:evision)}")
        _ -> :ok
      end

    case :erlang.load_nif(nif_file, 0) do
      :ok -> :ok
      {:error, {:reload, _}} -> :ok
      {:error, reason} -> Logger.warn("Failed to load nif: #{inspect(reason)}")
    end
  end

  def imdecode(_opts \\ []), do: :erlang.nif_error("imdecode not loaded")
  def imshow(_opts \\ []), do: :erlang.nif_error("cv::imshow not loaded")
  def waitKey(_opts \\ []), do: :erlang.nif_error("cv::waitkey not loaded")
  def destroyWindow(_opts \\ []), do: :erlang.nif_error("cv::destroy_window not loaded")
  def destroyAllWindows(), do: :erlang.nif_error("cv::destroyAllWindows not loaded")
  def mat_empty(), do: :erlang.nif_error("Mat::empty not loaded")
  def mat_type(_opts \\ []), do: :erlang.nif_error("Mat::type not loaded")
  def mat_as_type(_opts \\ []), do: :erlang.nif_error("Mat::as_type not loaded")
  def mat_shape(_opts \\ []), do: :erlang.nif_error("Mat::shape not loaded")
  def mat_roi(_opts \\ []), do: :erlang.nif_error("Mat::operator() not loaded")
  def mat_update_roi(_opts \\ []), do: :erlang.nif_error("Mat::update_roi() not loaded")
  def mat_clone(_opts \\ []), do: :erlang.nif_error("Mat::clone not loaded")
  def mat_zeros(_opts \\ []), do: :erlang.nif_error("Mat::zeros not loaded")
  def mat_ones(_opts \\ []), do: :erlang.nif_error("Mat::ones not loaded")
  def mat_arange(_opts \\ []), do: :erlang.nif_error("Mat::arange not loaded")
  def mat_full(_opts \\ []), do: :erlang.nif_error("Mat::full not loaded")
  def mat_at(_opts \\ []), do: :erlang.nif_error("Mat::at not loaded")
  def mat_set_to(_opts \\ []), do: :erlang.nif_error("Mat::setTo not loaded")
  def mat_dot(_opts \\ []), do: :erlang.nif_error("Mat::dot not loaded")
  def mat_channels(_opts \\ []), do: :erlang.nif_error("Mat::channels not loaded")
  def mat_depth(_opts \\ []), do: :erlang.nif_error("Mat::depth not loaded")
  def mat_isSubmatrix(_opts \\ []), do: :erlang.nif_error("Mat::isSubmatrix not loaded")
  def mat_isContinuous(_opts \\ []), do: :erlang.nif_error("Mat::isContinuous not loaded")
  def mat_total(_opts \\ []), do: :erlang.nif_error("Mat::total not loaded")
  def mat_elemSize(_opts \\ []), do: :erlang.nif_error("Mat::elemSize not loaded")
  def mat_elemSize1(_opts \\ []), do: :erlang.nif_error("Mat::elemSize1 not loaded")
  def mat_raw_type(_opts \\ []), do: :erlang.nif_error("Mat::raw_type not loaded")
  def mat_dims(_opts \\ []), do: :erlang.nif_error("Mat::dims not loaded")
  def mat_size(_opts \\ []), do: :erlang.nif_error("Mat::size not loaded")
  def mat_as_shape(_opts \\ []), do: :erlang.nif_error("Mat::as_shape not loaded")
  def mat_last_dim_as_channel(_opts \\ []), do: :erlang.nif_error("Mat::last_dim_as_channel not loaded")
  def mat_multiply(_opts \\ []), do: :erlang.nif_error("Mat::multiply not loaded")
  def mat_multiply_typed(_opts \\ []), do: :erlang.nif_error("Mat::multiply not loaded")
  def mat_abs(_opts \\ []), do: :erlang.nif_error("Mat::abs not loaded")
  def mat_reshape(_opts \\ []), do: :erlang.nif_error("Mat::reshape not loaded")
  def mat_matrix_multiply(_opts \\ []), do: :erlang.nif_error("Mat::matrix_multiply not loaded")
  def mat_broadcast_to(_opts \\ []), do: :erlang.nif_error("Mat::broadcast_to not loaded")
  def mat_round(_opts \\ []), do: :erlang.nif_error("Mat::round not loaded")
  def mat_negate(_opts \\ []), do: :erlang.nif_error("Mat::negate not loaded")
  def mat_to_batched(_opts \\ []), do: :erlang.nif_error("Mat::to_batched not loaded")
  def mat_bitwise_and(_opts \\ []), do: :erlang.nif_error("Mat::bitwise_and not loaded")
  def mat_logical_xor(_opts \\ []), do: :erlang.nif_error("Mat::bitwise_xor not loaded")
  def mat_bitwise_xor(_opts \\ []), do: :erlang.nif_error("Mat::bitwise_xor not loaded")
  def mat_ceil(_opts \\ []), do: :erlang.nif_error("Mat::ceil not loaded")
  def mat_transpose(_opts \\ []), do: :erlang.nif_error("Mat::transpose not loaded")
  def mat_expm1(_opts \\ []), do: :erlang.nif_error("Mat::expm1 not loaded")
  def mat_floor(_opts \\ []), do: :erlang.nif_error("Mat::floor not loaded")
  def mat_logical_and(_opts \\ []), do: :erlang.nif_error("Mat::logical_and not loaded")
  def mat_from_binary(_opts \\ []), do: :erlang.nif_error("Mat::from_binary not loaded")
  def mat_from_binary_by_shape(_opts \\ []), do: :erlang.nif_error("Mat::from_binary_by_shape not loaded")
  def mat_subtract(_opts \\ []), do: :erlang.nif_error("Mat::subtract not loaded")
  def mat_subtract_typed(_opts \\ []), do: :erlang.nif_error("Mat::subtract not loaded")
  def mat_sign(_opts \\ []), do: :erlang.nif_error("Mat::sign not loaded")
  def mat_bitwise_or(_opts \\ []), do: :erlang.nif_error("Mat::bitwise_or not loaded")
  def mat_bitwise_not(_opts \\ []), do: :erlang.nif_error("Mat::bitwise_not not loaded")
  def mat_divide(_opts \\ []), do: :erlang.nif_error("Mat::divide not loaded")
  def mat_divide_typed(_opts \\ []), do: :erlang.nif_error("Mat::divide not loaded")
  def mat_add(_opts \\ []), do: :erlang.nif_error("Mat::add not loaded")
  def mat_add_typed(_opts \\ []), do: :erlang.nif_error("Mat::add not loaded")
  def mat_eye(_opts \\ []), do: :erlang.nif_error("Mat::eye not loaded")
  def mat_to_binary(_opts \\ []), do: :erlang.nif_error("Mat::to_binary not loaded")
  def mat_cmp(_opts \\ []), do: :erlang.nif_error("Mat::greater not loaded")
  def mat_logical_or(_opts \\ []), do: :erlang.nif_error("Mat::logical_or not loaded")
  def mat_clip(_opts \\ []), do: :erlang.nif_error("Mat::clip not loaded")
  def akaze_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::compute not loaded")
  def akaze_create_static(_opts \\ []), do: :erlang.nif_error("cv::AKAZE::create not loaded")
  def akaze_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::defaultNorm not loaded")
  def akaze_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::descriptorSize not loaded")
  def akaze_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::descriptorType not loaded")
  def akaze_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::detect not loaded")
  def akaze_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::detectAndCompute not loaded")
  def akaze_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::empty not loaded")
  def akaze_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getDefaultName not loaded")
  def akaze_getDescriptorChannels(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getDescriptorChannels not loaded")
  def akaze_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getDescriptorSize not loaded")
  def akaze_getDescriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getDescriptorType not loaded")
  def akaze_getDiffusivity(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getDiffusivity not loaded")
  def akaze_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getNOctaveLayers not loaded")
  def akaze_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getNOctaves not loaded")
  def akaze_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::getThreshold not loaded")
  def akaze_read(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::read not loaded")
  def akaze_setDescriptorChannels(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setDescriptorChannels not loaded")
  def akaze_setDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setDescriptorSize not loaded")
  def akaze_setDescriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setDescriptorType not loaded")
  def akaze_setDiffusivity(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setDiffusivity not loaded")
  def akaze_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setNOctaveLayers not loaded")
  def akaze_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setNOctaves not loaded")
  def akaze_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::setThreshold not loaded")
  def akaze_write(_self, _opts \\ []), do: :erlang.nif_error("cv::AKAZE::write not loaded")
  def affineFeature_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::compute not loaded")
  def affineFeature_create_static(_opts \\ []), do: :erlang.nif_error("cv::AffineFeature::create not loaded")
  def affineFeature_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::defaultNorm not loaded")
  def affineFeature_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::descriptorSize not loaded")
  def affineFeature_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::descriptorType not loaded")
  def affineFeature_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::detect not loaded")
  def affineFeature_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::detectAndCompute not loaded")
  def affineFeature_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::empty not loaded")
  def affineFeature_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::getDefaultName not loaded")
  def affineFeature_getViewParams(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::getViewParams not loaded")
  def affineFeature_read(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::read not loaded")
  def affineFeature_setViewParams(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::setViewParams not loaded")
  def affineFeature_write(_self, _opts \\ []), do: :erlang.nif_error("cv::AffineFeature::write not loaded")
  def agastFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::compute not loaded")
  def agastFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::create not loaded")
  def agastFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::defaultNorm not loaded")
  def agastFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::descriptorSize not loaded")
  def agastFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::descriptorType not loaded")
  def agastFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::detect not loaded")
  def agastFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::detectAndCompute not loaded")
  def agastFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::empty not loaded")
  def agastFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::getDefaultName not loaded")
  def agastFeatureDetector_getNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::getNonmaxSuppression not loaded")
  def agastFeatureDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::getThreshold not loaded")
  def agastFeatureDetector_getType(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::getType not loaded")
  def agastFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::read not loaded")
  def agastFeatureDetector_setNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::setNonmaxSuppression not loaded")
  def agastFeatureDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::setThreshold not loaded")
  def agastFeatureDetector_setType(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::setType not loaded")
  def agastFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector::write not loaded")
  def algorithm_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::clear not loaded")
  def algorithm_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::empty not loaded")
  def algorithm_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::getDefaultName not loaded")
  def algorithm_read(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::read not loaded")
  def algorithm_save(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::save not loaded")
  def algorithm_write(_self, _opts \\ []), do: :erlang.nif_error("cv::Algorithm::write not loaded")
  def alignExposures_process(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignExposures::process not loaded")
  def alignMTB_calculateShift(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::calculateShift not loaded")
  def alignMTB_computeBitmaps(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::computeBitmaps not loaded")
  def alignMTB_getCut(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::getCut not loaded")
  def alignMTB_getExcludeRange(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::getExcludeRange not loaded")
  def alignMTB_getMaxBits(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::getMaxBits not loaded")
  def alignMTB_process(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::process not loaded")
  def alignMTB_setCut(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::setCut not loaded")
  def alignMTB_setExcludeRange(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::setExcludeRange not loaded")
  def alignMTB_setMaxBits(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::setMaxBits not loaded")
  def alignMTB_shiftMat(_self, _opts \\ []), do: :erlang.nif_error("cv::AlignMTB::shiftMat not loaded")
  def asyncArray_AsyncArray(_opts \\ []), do: :erlang.nif_error("cv::AsyncArray::AsyncArray not loaded")
  def asyncArray_get(_self, _opts \\ []), do: :erlang.nif_error("cv::AsyncArray::get not loaded")
  def asyncArray_release(_self, _opts \\ []), do: :erlang.nif_error("cv::AsyncArray::release not loaded")
  def asyncArray_valid(_self, _opts \\ []), do: :erlang.nif_error("cv::AsyncArray::valid not loaded")
  def asyncArray_wait_for(_self, _opts \\ []), do: :erlang.nif_error("cv::AsyncArray::wait_for not loaded")
  def bfMatcher_BFMatcher(_opts \\ []), do: :erlang.nif_error("cv::BFMatcher::BFMatcher not loaded")
  def bfMatcher_add(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::add not loaded")
  def bfMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::clear not loaded")
  def bfMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::clone not loaded")
  def bfMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::BFMatcher::create not loaded")
  def bfMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::empty not loaded")
  def bfMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::getTrainDescriptors not loaded")
  def bfMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::isMaskSupported not loaded")
  def bfMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::knnMatch not loaded")
  def bfMatcher_match(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::match not loaded")
  def bfMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::radiusMatch not loaded")
  def bfMatcher_read(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::read not loaded")
  def bfMatcher_train(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::train not loaded")
  def bfMatcher_write(_self, _opts \\ []), do: :erlang.nif_error("cv::BFMatcher::write not loaded")
  def bowImgDescriptorExtractor_BOWImgDescriptorExtractor(_opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::BOWImgDescriptorExtractor not loaded")
  def bowImgDescriptorExtractor_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::compute not loaded")
  def bowImgDescriptorExtractor_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::descriptorSize not loaded")
  def bowImgDescriptorExtractor_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::descriptorType not loaded")
  def bowImgDescriptorExtractor_getVocabulary(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::getVocabulary not loaded")
  def bowImgDescriptorExtractor_setVocabulary(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWImgDescriptorExtractor::setVocabulary not loaded")
  def bowKMeansTrainer_BOWKMeansTrainer(_opts \\ []), do: :erlang.nif_error("cv::BOWKMeansTrainer::BOWKMeansTrainer not loaded")
  def bowKMeansTrainer_cluster(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWKMeansTrainer::cluster not loaded")
  def bowTrainer_add(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWTrainer::add not loaded")
  def bowTrainer_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWTrainer::clear not loaded")
  def bowTrainer_cluster(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWTrainer::cluster not loaded")
  def bowTrainer_descriptorsCount(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWTrainer::descriptorsCount not loaded")
  def bowTrainer_getDescriptors(_self, _opts \\ []), do: :erlang.nif_error("cv::BOWTrainer::getDescriptors not loaded")
  def brisk_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::compute not loaded")
  def brisk_create_static(_opts \\ []), do: :erlang.nif_error("cv::BRISK::create not loaded")
  def brisk_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::defaultNorm not loaded")
  def brisk_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::descriptorSize not loaded")
  def brisk_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::descriptorType not loaded")
  def brisk_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::detect not loaded")
  def brisk_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::detectAndCompute not loaded")
  def brisk_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::empty not loaded")
  def brisk_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::getDefaultName not loaded")
  def brisk_getOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::getOctaves not loaded")
  def brisk_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::getThreshold not loaded")
  def brisk_read(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::read not loaded")
  def brisk_setOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::setOctaves not loaded")
  def brisk_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::setThreshold not loaded")
  def brisk_write(_self, _opts \\ []), do: :erlang.nif_error("cv::BRISK::write not loaded")
  def backgroundSubtractor_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractor::apply not loaded")
  def backgroundSubtractor_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractor::getBackgroundImage not loaded")
  def backgroundSubtractorKNN_getDetectShadows(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getDetectShadows not loaded")
  def backgroundSubtractorKNN_getDist2Threshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getDist2Threshold not loaded")
  def backgroundSubtractorKNN_getHistory(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getHistory not loaded")
  def backgroundSubtractorKNN_getNSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getNSamples not loaded")
  def backgroundSubtractorKNN_getShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getShadowThreshold not loaded")
  def backgroundSubtractorKNN_getShadowValue(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getShadowValue not loaded")
  def backgroundSubtractorKNN_getkNNSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::getkNNSamples not loaded")
  def backgroundSubtractorKNN_setDetectShadows(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setDetectShadows not loaded")
  def backgroundSubtractorKNN_setDist2Threshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setDist2Threshold not loaded")
  def backgroundSubtractorKNN_setHistory(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setHistory not loaded")
  def backgroundSubtractorKNN_setNSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setNSamples not loaded")
  def backgroundSubtractorKNN_setShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setShadowThreshold not loaded")
  def backgroundSubtractorKNN_setShadowValue(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setShadowValue not loaded")
  def backgroundSubtractorKNN_setkNNSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorKNN::setkNNSamples not loaded")
  def backgroundSubtractorMOG2_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::apply not loaded")
  def backgroundSubtractorMOG2_getBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getBackgroundRatio not loaded")
  def backgroundSubtractorMOG2_getComplexityReductionThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getComplexityReductionThreshold not loaded")
  def backgroundSubtractorMOG2_getDetectShadows(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getDetectShadows not loaded")
  def backgroundSubtractorMOG2_getHistory(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getHistory not loaded")
  def backgroundSubtractorMOG2_getNMixtures(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getNMixtures not loaded")
  def backgroundSubtractorMOG2_getShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getShadowThreshold not loaded")
  def backgroundSubtractorMOG2_getShadowValue(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getShadowValue not loaded")
  def backgroundSubtractorMOG2_getVarInit(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getVarInit not loaded")
  def backgroundSubtractorMOG2_getVarMax(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getVarMax not loaded")
  def backgroundSubtractorMOG2_getVarMin(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getVarMin not loaded")
  def backgroundSubtractorMOG2_getVarThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getVarThreshold not loaded")
  def backgroundSubtractorMOG2_getVarThresholdGen(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::getVarThresholdGen not loaded")
  def backgroundSubtractorMOG2_setBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setBackgroundRatio not loaded")
  def backgroundSubtractorMOG2_setComplexityReductionThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setComplexityReductionThreshold not loaded")
  def backgroundSubtractorMOG2_setDetectShadows(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setDetectShadows not loaded")
  def backgroundSubtractorMOG2_setHistory(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setHistory not loaded")
  def backgroundSubtractorMOG2_setNMixtures(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setNMixtures not loaded")
  def backgroundSubtractorMOG2_setShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setShadowThreshold not loaded")
  def backgroundSubtractorMOG2_setShadowValue(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setShadowValue not loaded")
  def backgroundSubtractorMOG2_setVarInit(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setVarInit not loaded")
  def backgroundSubtractorMOG2_setVarMax(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setVarMax not loaded")
  def backgroundSubtractorMOG2_setVarMin(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setVarMin not loaded")
  def backgroundSubtractorMOG2_setVarThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setVarThreshold not loaded")
  def backgroundSubtractorMOG2_setVarThresholdGen(_self, _opts \\ []), do: :erlang.nif_error("cv::BackgroundSubtractorMOG2::setVarThresholdGen not loaded")
  def clahe_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::apply not loaded")
  def clahe_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::collectGarbage not loaded")
  def clahe_getClipLimit(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::getClipLimit not loaded")
  def clahe_getTilesGridSize(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::getTilesGridSize not loaded")
  def clahe_setClipLimit(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::setClipLimit not loaded")
  def clahe_setTilesGridSize(_self, _opts \\ []), do: :erlang.nif_error("cv::CLAHE::setTilesGridSize not loaded")
  def calibrateCRF_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::clear not loaded")
  def calibrateCRF_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::empty not loaded")
  def calibrateCRF_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::getDefaultName not loaded")
  def calibrateCRF_process(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::process not loaded")
  def calibrateCRF_read(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::read not loaded")
  def calibrateCRF_save(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::save not loaded")
  def calibrateCRF_write(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateCRF::write not loaded")
  def calibrateDebevec_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::clear not loaded")
  def calibrateDebevec_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::empty not loaded")
  def calibrateDebevec_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::getDefaultName not loaded")
  def calibrateDebevec_getLambda(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::getLambda not loaded")
  def calibrateDebevec_getRandom(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::getRandom not loaded")
  def calibrateDebevec_getSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::getSamples not loaded")
  def calibrateDebevec_process(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::process not loaded")
  def calibrateDebevec_read(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::read not loaded")
  def calibrateDebevec_save(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::save not loaded")
  def calibrateDebevec_setLambda(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::setLambda not loaded")
  def calibrateDebevec_setRandom(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::setRandom not loaded")
  def calibrateDebevec_setSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::setSamples not loaded")
  def calibrateDebevec_write(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateDebevec::write not loaded")
  def calibrateRobertson_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::clear not loaded")
  def calibrateRobertson_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::empty not loaded")
  def calibrateRobertson_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::getDefaultName not loaded")
  def calibrateRobertson_getMaxIter(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::getMaxIter not loaded")
  def calibrateRobertson_getRadiance(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::getRadiance not loaded")
  def calibrateRobertson_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::getThreshold not loaded")
  def calibrateRobertson_process(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::process not loaded")
  def calibrateRobertson_read(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::read not loaded")
  def calibrateRobertson_save(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::save not loaded")
  def calibrateRobertson_setMaxIter(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::setMaxIter not loaded")
  def calibrateRobertson_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::setThreshold not loaded")
  def calibrateRobertson_write(_self, _opts \\ []), do: :erlang.nif_error("cv::CalibrateRobertson::write not loaded")
  def cascadeClassifier_CascadeClassifier(_opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::CascadeClassifier not loaded")
  def cascadeClassifier_convert_static(_opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::convert not loaded")
  def cascadeClassifier_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::detectMultiScale not loaded")
  def cascadeClassifier_detectMultiScale2(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::detectMultiScale2 not loaded")
  def cascadeClassifier_detectMultiScale3(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::detectMultiScale3 not loaded")
  def cascadeClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::empty not loaded")
  def cascadeClassifier_getFeatureType(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::getFeatureType not loaded")
  def cascadeClassifier_getOriginalWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::getOriginalWindowSize not loaded")
  def cascadeClassifier_isOldFormatCascade(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::isOldFormatCascade not loaded")
  def cascadeClassifier_load(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::load not loaded")
  def cascadeClassifier_read(_self, _opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier::read not loaded")
  def circlesGridFinderParameters_CirclesGridFinderParameters(_opts \\ []), do: :erlang.nif_error("cv::CirclesGridFinderParameters::CirclesGridFinderParameters not loaded")
  def circlesGridFinderParameters_get_convexHullFactor(_self), do: :erlang.nif_error("CirclesGridFinderParameters::convexHullFactor getter not loaded")
  def circlesGridFinderParameters_set_convexHullFactor(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::convexHullFactor setter not loaded")
  def circlesGridFinderParameters_get_densityNeighborhoodSize(_self), do: :erlang.nif_error("CirclesGridFinderParameters::densityNeighborhoodSize getter not loaded")
  def circlesGridFinderParameters_set_densityNeighborhoodSize(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::densityNeighborhoodSize setter not loaded")
  def circlesGridFinderParameters_get_edgeGain(_self), do: :erlang.nif_error("CirclesGridFinderParameters::edgeGain getter not loaded")
  def circlesGridFinderParameters_set_edgeGain(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::edgeGain setter not loaded")
  def circlesGridFinderParameters_get_edgePenalty(_self), do: :erlang.nif_error("CirclesGridFinderParameters::edgePenalty getter not loaded")
  def circlesGridFinderParameters_set_edgePenalty(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::edgePenalty setter not loaded")
  def circlesGridFinderParameters_get_existingVertexGain(_self), do: :erlang.nif_error("CirclesGridFinderParameters::existingVertexGain getter not loaded")
  def circlesGridFinderParameters_set_existingVertexGain(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::existingVertexGain setter not loaded")
  def circlesGridFinderParameters_get_keypointScale(_self), do: :erlang.nif_error("CirclesGridFinderParameters::keypointScale getter not loaded")
  def circlesGridFinderParameters_set_keypointScale(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::keypointScale setter not loaded")
  def circlesGridFinderParameters_get_kmeansAttempts(_self), do: :erlang.nif_error("CirclesGridFinderParameters::kmeansAttempts getter not loaded")
  def circlesGridFinderParameters_set_kmeansAttempts(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::kmeansAttempts setter not loaded")
  def circlesGridFinderParameters_get_maxRectifiedDistance(_self), do: :erlang.nif_error("CirclesGridFinderParameters::maxRectifiedDistance getter not loaded")
  def circlesGridFinderParameters_set_maxRectifiedDistance(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::maxRectifiedDistance setter not loaded")
  def circlesGridFinderParameters_get_minDensity(_self), do: :erlang.nif_error("CirclesGridFinderParameters::minDensity getter not loaded")
  def circlesGridFinderParameters_set_minDensity(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::minDensity setter not loaded")
  def circlesGridFinderParameters_get_minDistanceToAddKeypoint(_self), do: :erlang.nif_error("CirclesGridFinderParameters::minDistanceToAddKeypoint getter not loaded")
  def circlesGridFinderParameters_set_minDistanceToAddKeypoint(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::minDistanceToAddKeypoint setter not loaded")
  def circlesGridFinderParameters_get_minGraphConfidence(_self), do: :erlang.nif_error("CirclesGridFinderParameters::minGraphConfidence getter not loaded")
  def circlesGridFinderParameters_set_minGraphConfidence(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::minGraphConfidence setter not loaded")
  def circlesGridFinderParameters_get_minRNGEdgeSwitchDist(_self), do: :erlang.nif_error("CirclesGridFinderParameters::minRNGEdgeSwitchDist getter not loaded")
  def circlesGridFinderParameters_set_minRNGEdgeSwitchDist(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::minRNGEdgeSwitchDist setter not loaded")
  def circlesGridFinderParameters_get_squareSize(_self), do: :erlang.nif_error("CirclesGridFinderParameters::squareSize getter not loaded")
  def circlesGridFinderParameters_set_squareSize(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::squareSize setter not loaded")
  def circlesGridFinderParameters_get_vertexGain(_self), do: :erlang.nif_error("CirclesGridFinderParameters::vertexGain getter not loaded")
  def circlesGridFinderParameters_set_vertexGain(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::vertexGain setter not loaded")
  def circlesGridFinderParameters_get_vertexPenalty(_self), do: :erlang.nif_error("CirclesGridFinderParameters::vertexPenalty getter not loaded")
  def circlesGridFinderParameters_set_vertexPenalty(_self, _prop), do: :erlang.nif_error("CirclesGridFinderParameters::vertexPenalty setter not loaded")
  def disOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::create not loaded")
  def disOpticalFlow_getFinestScale(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getFinestScale not loaded")
  def disOpticalFlow_getGradientDescentIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getGradientDescentIterations not loaded")
  def disOpticalFlow_getPatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getPatchSize not loaded")
  def disOpticalFlow_getPatchStride(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getPatchStride not loaded")
  def disOpticalFlow_getUseMeanNormalization(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getUseMeanNormalization not loaded")
  def disOpticalFlow_getUseSpatialPropagation(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getUseSpatialPropagation not loaded")
  def disOpticalFlow_getVariationalRefinementAlpha(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getVariationalRefinementAlpha not loaded")
  def disOpticalFlow_getVariationalRefinementDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getVariationalRefinementDelta not loaded")
  def disOpticalFlow_getVariationalRefinementGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getVariationalRefinementGamma not loaded")
  def disOpticalFlow_getVariationalRefinementIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::getVariationalRefinementIterations not loaded")
  def disOpticalFlow_setFinestScale(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setFinestScale not loaded")
  def disOpticalFlow_setGradientDescentIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setGradientDescentIterations not loaded")
  def disOpticalFlow_setPatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setPatchSize not loaded")
  def disOpticalFlow_setPatchStride(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setPatchStride not loaded")
  def disOpticalFlow_setUseMeanNormalization(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setUseMeanNormalization not loaded")
  def disOpticalFlow_setUseSpatialPropagation(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setUseSpatialPropagation not loaded")
  def disOpticalFlow_setVariationalRefinementAlpha(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setVariationalRefinementAlpha not loaded")
  def disOpticalFlow_setVariationalRefinementDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setVariationalRefinementDelta not loaded")
  def disOpticalFlow_setVariationalRefinementGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setVariationalRefinementGamma not loaded")
  def disOpticalFlow_setVariationalRefinementIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow::setVariationalRefinementIterations not loaded")
  def dMatch_DMatch(_opts \\ []), do: :erlang.nif_error("cv::DMatch::DMatch not loaded")
  def dMatch_get_distance(_self), do: :erlang.nif_error("DMatch::distance getter not loaded")
  def dMatch_set_distance(_self, _prop), do: :erlang.nif_error("DMatch::distance setter not loaded")
  def dMatch_get_imgIdx(_self), do: :erlang.nif_error("DMatch::imgIdx getter not loaded")
  def dMatch_set_imgIdx(_self, _prop), do: :erlang.nif_error("DMatch::imgIdx setter not loaded")
  def dMatch_get_queryIdx(_self), do: :erlang.nif_error("DMatch::queryIdx getter not loaded")
  def dMatch_set_queryIdx(_self, _prop), do: :erlang.nif_error("DMatch::queryIdx setter not loaded")
  def dMatch_get_trainIdx(_self), do: :erlang.nif_error("DMatch::trainIdx getter not loaded")
  def dMatch_set_trainIdx(_self, _prop), do: :erlang.nif_error("DMatch::trainIdx setter not loaded")
  def denseOpticalFlow_calc(_self, _opts \\ []), do: :erlang.nif_error("cv::DenseOpticalFlow::calc not loaded")
  def denseOpticalFlow_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::DenseOpticalFlow::collectGarbage not loaded")
  def descriptorMatcher_add(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::add not loaded")
  def descriptorMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::clear not loaded")
  def descriptorMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::clone not loaded")
  def descriptorMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::create not loaded")
  def descriptorMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::empty not loaded")
  def descriptorMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::getTrainDescriptors not loaded")
  def descriptorMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::isMaskSupported not loaded")
  def descriptorMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::knnMatch not loaded")
  def descriptorMatcher_match(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::match not loaded")
  def descriptorMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::radiusMatch not loaded")
  def descriptorMatcher_read(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::read not loaded")
  def descriptorMatcher_train(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::train not loaded")
  def descriptorMatcher_write(_self, _opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher::write not loaded")
  def faceDetectorYN_create_static(_opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::create not loaded")
  def faceDetectorYN_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::detect not loaded")
  def faceDetectorYN_getInputSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::getInputSize not loaded")
  def faceDetectorYN_getNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::getNMSThreshold not loaded")
  def faceDetectorYN_getScoreThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::getScoreThreshold not loaded")
  def faceDetectorYN_getTopK(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::getTopK not loaded")
  def faceDetectorYN_setInputSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::setInputSize not loaded")
  def faceDetectorYN_setNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::setNMSThreshold not loaded")
  def faceDetectorYN_setScoreThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::setScoreThreshold not loaded")
  def faceDetectorYN_setTopK(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN::setTopK not loaded")
  def faceRecognizerSF_alignCrop(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceRecognizerSF::alignCrop not loaded")
  def faceRecognizerSF_create_static(_opts \\ []), do: :erlang.nif_error("cv::FaceRecognizerSF::create not loaded")
  def faceRecognizerSF_feature(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceRecognizerSF::feature not loaded")
  def faceRecognizerSF_match(_self, _opts \\ []), do: :erlang.nif_error("cv::FaceRecognizerSF::match not loaded")
  def farnebackOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::create not loaded")
  def farnebackOpticalFlow_getFastPyramids(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getFastPyramids not loaded")
  def farnebackOpticalFlow_getFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getFlags not loaded")
  def farnebackOpticalFlow_getNumIters(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getNumIters not loaded")
  def farnebackOpticalFlow_getNumLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getNumLevels not loaded")
  def farnebackOpticalFlow_getPolyN(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getPolyN not loaded")
  def farnebackOpticalFlow_getPolySigma(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getPolySigma not loaded")
  def farnebackOpticalFlow_getPyrScale(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getPyrScale not loaded")
  def farnebackOpticalFlow_getWinSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::getWinSize not loaded")
  def farnebackOpticalFlow_setFastPyramids(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setFastPyramids not loaded")
  def farnebackOpticalFlow_setFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setFlags not loaded")
  def farnebackOpticalFlow_setNumIters(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setNumIters not loaded")
  def farnebackOpticalFlow_setNumLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setNumLevels not loaded")
  def farnebackOpticalFlow_setPolyN(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setPolyN not loaded")
  def farnebackOpticalFlow_setPolySigma(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setPolySigma not loaded")
  def farnebackOpticalFlow_setPyrScale(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setPyrScale not loaded")
  def farnebackOpticalFlow_setWinSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow::setWinSize not loaded")
  def fastFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::compute not loaded")
  def fastFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::create not loaded")
  def fastFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::defaultNorm not loaded")
  def fastFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::descriptorSize not loaded")
  def fastFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::descriptorType not loaded")
  def fastFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::detect not loaded")
  def fastFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::detectAndCompute not loaded")
  def fastFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::empty not loaded")
  def fastFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::getDefaultName not loaded")
  def fastFeatureDetector_getNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::getNonmaxSuppression not loaded")
  def fastFeatureDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::getThreshold not loaded")
  def fastFeatureDetector_getType(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::getType not loaded")
  def fastFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::read not loaded")
  def fastFeatureDetector_setNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::setNonmaxSuppression not loaded")
  def fastFeatureDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::setThreshold not loaded")
  def fastFeatureDetector_setType(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::setType not loaded")
  def fastFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector::write not loaded")
  def feature2D_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::compute not loaded")
  def feature2D_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::defaultNorm not loaded")
  def feature2D_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::descriptorSize not loaded")
  def feature2D_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::descriptorType not loaded")
  def feature2D_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::detect not loaded")
  def feature2D_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::detectAndCompute not loaded")
  def feature2D_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::empty not loaded")
  def feature2D_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::getDefaultName not loaded")
  def feature2D_read(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::read not loaded")
  def feature2D_write(_self, _opts \\ []), do: :erlang.nif_error("cv::Feature2D::write not loaded")
  def fileNode_FileNode(_opts \\ []), do: :erlang.nif_error("cv::FileNode::FileNode not loaded")
  def fileNode_at(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::at not loaded")
  def fileNode_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::empty not loaded")
  def fileNode_getNode(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::getNode not loaded")
  def fileNode_isInt(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isInt not loaded")
  def fileNode_isMap(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isMap not loaded")
  def fileNode_isNamed(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isNamed not loaded")
  def fileNode_isNone(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isNone not loaded")
  def fileNode_isReal(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isReal not loaded")
  def fileNode_isSeq(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isSeq not loaded")
  def fileNode_isString(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::isString not loaded")
  def fileNode_keys(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::keys not loaded")
  def fileNode_mat(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::mat not loaded")
  def fileNode_name(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::name not loaded")
  def fileNode_rawSize(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::rawSize not loaded")
  def fileNode_real(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::real not loaded")
  def fileNode_size(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::size not loaded")
  def fileNode_string(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::string not loaded")
  def fileNode_type(_self, _opts \\ []), do: :erlang.nif_error("cv::FileNode::type not loaded")
  def fileStorage_FileStorage(_opts \\ []), do: :erlang.nif_error("cv::FileStorage::FileStorage not loaded")
  def fileStorage_endWriteStruct(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::endWriteStruct not loaded")
  def fileStorage_getFirstTopLevelNode(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::getFirstTopLevelNode not loaded")
  def fileStorage_getFormat(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::getFormat not loaded")
  def fileStorage_getNode(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::getNode not loaded")
  def fileStorage_isOpened(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::isOpened not loaded")
  def fileStorage_open(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::open not loaded")
  def fileStorage_release(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::release not loaded")
  def fileStorage_releaseAndGetString(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::releaseAndGetString not loaded")
  def fileStorage_root(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::root not loaded")
  def fileStorage_startWriteStruct(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::startWriteStruct not loaded")
  def fileStorage_write(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::write not loaded")
  def fileStorage_writeComment(_self, _opts \\ []), do: :erlang.nif_error("cv::FileStorage::writeComment not loaded")
  def flannBasedMatcher_FlannBasedMatcher(_opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::FlannBasedMatcher not loaded")
  def flannBasedMatcher_add(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::add not loaded")
  def flannBasedMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::clear not loaded")
  def flannBasedMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::clone not loaded")
  def flannBasedMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::create not loaded")
  def flannBasedMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::empty not loaded")
  def flannBasedMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::getTrainDescriptors not loaded")
  def flannBasedMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::isMaskSupported not loaded")
  def flannBasedMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::knnMatch not loaded")
  def flannBasedMatcher_match(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::match not loaded")
  def flannBasedMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::radiusMatch not loaded")
  def flannBasedMatcher_read(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::read not loaded")
  def flannBasedMatcher_train(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::train not loaded")
  def flannBasedMatcher_write(_self, _opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher::write not loaded")
  def gfttDetector_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::compute not loaded")
  def gfttDetector_create_static(_opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::create not loaded")
  def gfttDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::defaultNorm not loaded")
  def gfttDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::descriptorSize not loaded")
  def gfttDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::descriptorType not loaded")
  def gfttDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::detect not loaded")
  def gfttDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::detectAndCompute not loaded")
  def gfttDetector_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::empty not loaded")
  def gfttDetector_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getBlockSize not loaded")
  def gfttDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getDefaultName not loaded")
  def gfttDetector_getHarrisDetector(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getHarrisDetector not loaded")
  def gfttDetector_getK(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getK not loaded")
  def gfttDetector_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getMaxFeatures not loaded")
  def gfttDetector_getMinDistance(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getMinDistance not loaded")
  def gfttDetector_getQualityLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::getQualityLevel not loaded")
  def gfttDetector_read(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::read not loaded")
  def gfttDetector_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setBlockSize not loaded")
  def gfttDetector_setHarrisDetector(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setHarrisDetector not loaded")
  def gfttDetector_setK(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setK not loaded")
  def gfttDetector_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setMaxFeatures not loaded")
  def gfttDetector_setMinDistance(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setMinDistance not loaded")
  def gfttDetector_setQualityLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::setQualityLevel not loaded")
  def gfttDetector_write(_self, _opts \\ []), do: :erlang.nif_error("cv::GFTTDetector::write not loaded")
  def generalizedHough_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::detect not loaded")
  def generalizedHough_getCannyHighThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::getCannyHighThresh not loaded")
  def generalizedHough_getCannyLowThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::getCannyLowThresh not loaded")
  def generalizedHough_getDp(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::getDp not loaded")
  def generalizedHough_getMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::getMaxBufferSize not loaded")
  def generalizedHough_getMinDist(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::getMinDist not loaded")
  def generalizedHough_setCannyHighThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setCannyHighThresh not loaded")
  def generalizedHough_setCannyLowThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setCannyLowThresh not loaded")
  def generalizedHough_setDp(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setDp not loaded")
  def generalizedHough_setMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setMaxBufferSize not loaded")
  def generalizedHough_setMinDist(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setMinDist not loaded")
  def generalizedHough_setTemplate(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHough::setTemplate not loaded")
  def generalizedHoughBallard_getLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughBallard::getLevels not loaded")
  def generalizedHoughBallard_getVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughBallard::getVotesThreshold not loaded")
  def generalizedHoughBallard_setLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughBallard::setLevels not loaded")
  def generalizedHoughBallard_setVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughBallard::setVotesThreshold not loaded")
  def generalizedHoughGuil_getAngleEpsilon(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getAngleEpsilon not loaded")
  def generalizedHoughGuil_getAngleStep(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getAngleStep not loaded")
  def generalizedHoughGuil_getAngleThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getAngleThresh not loaded")
  def generalizedHoughGuil_getLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getLevels not loaded")
  def generalizedHoughGuil_getMaxAngle(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getMaxAngle not loaded")
  def generalizedHoughGuil_getMaxScale(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getMaxScale not loaded")
  def generalizedHoughGuil_getMinAngle(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getMinAngle not loaded")
  def generalizedHoughGuil_getMinScale(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getMinScale not loaded")
  def generalizedHoughGuil_getPosThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getPosThresh not loaded")
  def generalizedHoughGuil_getScaleStep(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getScaleStep not loaded")
  def generalizedHoughGuil_getScaleThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getScaleThresh not loaded")
  def generalizedHoughGuil_getXi(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::getXi not loaded")
  def generalizedHoughGuil_setAngleEpsilon(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setAngleEpsilon not loaded")
  def generalizedHoughGuil_setAngleStep(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setAngleStep not loaded")
  def generalizedHoughGuil_setAngleThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setAngleThresh not loaded")
  def generalizedHoughGuil_setLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setLevels not loaded")
  def generalizedHoughGuil_setMaxAngle(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setMaxAngle not loaded")
  def generalizedHoughGuil_setMaxScale(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setMaxScale not loaded")
  def generalizedHoughGuil_setMinAngle(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setMinAngle not loaded")
  def generalizedHoughGuil_setMinScale(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setMinScale not loaded")
  def generalizedHoughGuil_setPosThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setPosThresh not loaded")
  def generalizedHoughGuil_setScaleStep(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setScaleStep not loaded")
  def generalizedHoughGuil_setScaleThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setScaleThresh not loaded")
  def generalizedHoughGuil_setXi(_self, _opts \\ []), do: :erlang.nif_error("cv::GeneralizedHoughGuil::setXi not loaded")
  def hogDescriptor_HOGDescriptor(_opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::HOGDescriptor not loaded")
  def hogDescriptor_checkDetectorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::checkDetectorSize not loaded")
  def hogDescriptor_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::compute not loaded")
  def hogDescriptor_computeGradient(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::computeGradient not loaded")
  def hogDescriptor_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::detect not loaded")
  def hogDescriptor_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::detectMultiScale not loaded")
  def hogDescriptor_getDaimlerPeopleDetector_static(_opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::getDaimlerPeopleDetector not loaded")
  def hogDescriptor_getDefaultPeopleDetector_static(_opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::getDefaultPeopleDetector not loaded")
  def hogDescriptor_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::getDescriptorSize not loaded")
  def hogDescriptor_getWinSigma(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::getWinSigma not loaded")
  def hogDescriptor_load(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::load not loaded")
  def hogDescriptor_save(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::save not loaded")
  def hogDescriptor_setSVMDetector(_self, _opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor::setSVMDetector not loaded")
  def hogDescriptor_get_L2HysThreshold(_self), do: :erlang.nif_error("HOGDescriptor::L2HysThreshold getter not loaded")
  def hogDescriptor_get_blockSize(_self), do: :erlang.nif_error("HOGDescriptor::blockSize getter not loaded")
  def hogDescriptor_get_blockStride(_self), do: :erlang.nif_error("HOGDescriptor::blockStride getter not loaded")
  def hogDescriptor_get_cellSize(_self), do: :erlang.nif_error("HOGDescriptor::cellSize getter not loaded")
  def hogDescriptor_get_derivAperture(_self), do: :erlang.nif_error("HOGDescriptor::derivAperture getter not loaded")
  def hogDescriptor_get_gammaCorrection(_self), do: :erlang.nif_error("HOGDescriptor::gammaCorrection getter not loaded")
  def hogDescriptor_get_histogramNormType(_self), do: :erlang.nif_error("HOGDescriptor::histogramNormType getter not loaded")
  def hogDescriptor_get_nbins(_self), do: :erlang.nif_error("HOGDescriptor::nbins getter not loaded")
  def hogDescriptor_get_nlevels(_self), do: :erlang.nif_error("HOGDescriptor::nlevels getter not loaded")
  def hogDescriptor_get_signedGradient(_self), do: :erlang.nif_error("HOGDescriptor::signedGradient getter not loaded")
  def hogDescriptor_get_svmDetector(_self), do: :erlang.nif_error("HOGDescriptor::svmDetector getter not loaded")
  def hogDescriptor_get_winSigma(_self), do: :erlang.nif_error("HOGDescriptor::winSigma getter not loaded")
  def hogDescriptor_get_winSize(_self), do: :erlang.nif_error("HOGDescriptor::winSize getter not loaded")
  def kaze_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::compute not loaded")
  def kaze_create_static(_opts \\ []), do: :erlang.nif_error("cv::KAZE::create not loaded")
  def kaze_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::defaultNorm not loaded")
  def kaze_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::descriptorSize not loaded")
  def kaze_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::descriptorType not loaded")
  def kaze_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::detect not loaded")
  def kaze_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::detectAndCompute not loaded")
  def kaze_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::empty not loaded")
  def kaze_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getDefaultName not loaded")
  def kaze_getDiffusivity(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getDiffusivity not loaded")
  def kaze_getExtended(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getExtended not loaded")
  def kaze_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getNOctaveLayers not loaded")
  def kaze_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getNOctaves not loaded")
  def kaze_getThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getThreshold not loaded")
  def kaze_getUpright(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::getUpright not loaded")
  def kaze_read(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::read not loaded")
  def kaze_setDiffusivity(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setDiffusivity not loaded")
  def kaze_setExtended(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setExtended not loaded")
  def kaze_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setNOctaveLayers not loaded")
  def kaze_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setNOctaves not loaded")
  def kaze_setThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setThreshold not loaded")
  def kaze_setUpright(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::setUpright not loaded")
  def kaze_write(_self, _opts \\ []), do: :erlang.nif_error("cv::KAZE::write not loaded")
  def kalmanFilter_KalmanFilter(_opts \\ []), do: :erlang.nif_error("cv::KalmanFilter::KalmanFilter not loaded")
  def kalmanFilter_correct(_self, _opts \\ []), do: :erlang.nif_error("cv::KalmanFilter::correct not loaded")
  def kalmanFilter_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::KalmanFilter::predict not loaded")
  def kalmanFilter_get_controlMatrix(_self), do: :erlang.nif_error("KalmanFilter::controlMatrix getter not loaded")
  def kalmanFilter_set_controlMatrix(_self, _prop), do: :erlang.nif_error("KalmanFilter::controlMatrix setter not loaded")
  def kalmanFilter_get_errorCovPost(_self), do: :erlang.nif_error("KalmanFilter::errorCovPost getter not loaded")
  def kalmanFilter_set_errorCovPost(_self, _prop), do: :erlang.nif_error("KalmanFilter::errorCovPost setter not loaded")
  def kalmanFilter_get_errorCovPre(_self), do: :erlang.nif_error("KalmanFilter::errorCovPre getter not loaded")
  def kalmanFilter_set_errorCovPre(_self, _prop), do: :erlang.nif_error("KalmanFilter::errorCovPre setter not loaded")
  def kalmanFilter_get_gain(_self), do: :erlang.nif_error("KalmanFilter::gain getter not loaded")
  def kalmanFilter_set_gain(_self, _prop), do: :erlang.nif_error("KalmanFilter::gain setter not loaded")
  def kalmanFilter_get_measurementMatrix(_self), do: :erlang.nif_error("KalmanFilter::measurementMatrix getter not loaded")
  def kalmanFilter_set_measurementMatrix(_self, _prop), do: :erlang.nif_error("KalmanFilter::measurementMatrix setter not loaded")
  def kalmanFilter_get_measurementNoiseCov(_self), do: :erlang.nif_error("KalmanFilter::measurementNoiseCov getter not loaded")
  def kalmanFilter_set_measurementNoiseCov(_self, _prop), do: :erlang.nif_error("KalmanFilter::measurementNoiseCov setter not loaded")
  def kalmanFilter_get_processNoiseCov(_self), do: :erlang.nif_error("KalmanFilter::processNoiseCov getter not loaded")
  def kalmanFilter_set_processNoiseCov(_self, _prop), do: :erlang.nif_error("KalmanFilter::processNoiseCov setter not loaded")
  def kalmanFilter_get_statePost(_self), do: :erlang.nif_error("KalmanFilter::statePost getter not loaded")
  def kalmanFilter_set_statePost(_self, _prop), do: :erlang.nif_error("KalmanFilter::statePost setter not loaded")
  def kalmanFilter_get_statePre(_self), do: :erlang.nif_error("KalmanFilter::statePre getter not loaded")
  def kalmanFilter_set_statePre(_self, _prop), do: :erlang.nif_error("KalmanFilter::statePre setter not loaded")
  def kalmanFilter_get_transitionMatrix(_self), do: :erlang.nif_error("KalmanFilter::transitionMatrix getter not loaded")
  def kalmanFilter_set_transitionMatrix(_self, _prop), do: :erlang.nif_error("KalmanFilter::transitionMatrix setter not loaded")
  def keyPoint_KeyPoint(_opts \\ []), do: :erlang.nif_error("cv::KeyPoint::KeyPoint not loaded")
  def keyPoint_convert_static(_opts \\ []), do: :erlang.nif_error("cv::KeyPoint::convert not loaded")
  def keyPoint_overlap_static(_opts \\ []), do: :erlang.nif_error("cv::KeyPoint::overlap not loaded")
  def keyPoint_get_angle(_self), do: :erlang.nif_error("KeyPoint::angle getter not loaded")
  def keyPoint_set_angle(_self, _prop), do: :erlang.nif_error("KeyPoint::angle setter not loaded")
  def keyPoint_get_class_id(_self), do: :erlang.nif_error("KeyPoint::class_id getter not loaded")
  def keyPoint_set_class_id(_self, _prop), do: :erlang.nif_error("KeyPoint::class_id setter not loaded")
  def keyPoint_get_octave(_self), do: :erlang.nif_error("KeyPoint::octave getter not loaded")
  def keyPoint_set_octave(_self, _prop), do: :erlang.nif_error("KeyPoint::octave setter not loaded")
  def keyPoint_get_pt(_self), do: :erlang.nif_error("KeyPoint::pt getter not loaded")
  def keyPoint_set_pt(_self, _prop), do: :erlang.nif_error("KeyPoint::pt setter not loaded")
  def keyPoint_get_response(_self), do: :erlang.nif_error("KeyPoint::response getter not loaded")
  def keyPoint_set_response(_self, _prop), do: :erlang.nif_error("KeyPoint::response setter not loaded")
  def keyPoint_get_size(_self), do: :erlang.nif_error("KeyPoint::size getter not loaded")
  def keyPoint_set_size(_self, _prop), do: :erlang.nif_error("KeyPoint::size setter not loaded")
  def lineSegmentDetector_compareSegments(_self, _opts \\ []), do: :erlang.nif_error("cv::LineSegmentDetector::compareSegments not loaded")
  def lineSegmentDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::LineSegmentDetector::detect not loaded")
  def lineSegmentDetector_drawSegments(_self, _opts \\ []), do: :erlang.nif_error("cv::LineSegmentDetector::drawSegments not loaded")
  def mser_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::compute not loaded")
  def mser_create_static(_opts \\ []), do: :erlang.nif_error("cv::MSER::create not loaded")
  def mser_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::defaultNorm not loaded")
  def mser_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::descriptorSize not loaded")
  def mser_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::descriptorType not loaded")
  def mser_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::detect not loaded")
  def mser_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::detectAndCompute not loaded")
  def mser_detectRegions(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::detectRegions not loaded")
  def mser_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::empty not loaded")
  def mser_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::getDefaultName not loaded")
  def mser_getDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::getDelta not loaded")
  def mser_getMaxArea(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::getMaxArea not loaded")
  def mser_getMinArea(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::getMinArea not loaded")
  def mser_getPass2Only(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::getPass2Only not loaded")
  def mser_read(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::read not loaded")
  def mser_setDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::setDelta not loaded")
  def mser_setMaxArea(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::setMaxArea not loaded")
  def mser_setMinArea(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::setMinArea not loaded")
  def mser_setPass2Only(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::setPass2Only not loaded")
  def mser_write(_self, _opts \\ []), do: :erlang.nif_error("cv::MSER::write not loaded")
  def mergeDebevec_process(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeDebevec::process not loaded")
  def mergeExposures_process(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeExposures::process not loaded")
  def mergeMertens_getContrastWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::getContrastWeight not loaded")
  def mergeMertens_getExposureWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::getExposureWeight not loaded")
  def mergeMertens_getSaturationWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::getSaturationWeight not loaded")
  def mergeMertens_process(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::process not loaded")
  def mergeMertens_setContrastWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::setContrastWeight not loaded")
  def mergeMertens_setExposureWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::setExposureWeight not loaded")
  def mergeMertens_setSaturationWeight(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeMertens::setSaturationWeight not loaded")
  def mergeRobertson_process(_self, _opts \\ []), do: :erlang.nif_error("cv::MergeRobertson::process not loaded")
  def orb_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::compute not loaded")
  def orb_create_static(_opts \\ []), do: :erlang.nif_error("cv::ORB::create not loaded")
  def orb_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::defaultNorm not loaded")
  def orb_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::descriptorSize not loaded")
  def orb_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::descriptorType not loaded")
  def orb_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::detect not loaded")
  def orb_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::detectAndCompute not loaded")
  def orb_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::empty not loaded")
  def orb_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getDefaultName not loaded")
  def orb_getEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getEdgeThreshold not loaded")
  def orb_getFastThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getFastThreshold not loaded")
  def orb_getFirstLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getFirstLevel not loaded")
  def orb_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getMaxFeatures not loaded")
  def orb_getNLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getNLevels not loaded")
  def orb_getPatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getPatchSize not loaded")
  def orb_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getScaleFactor not loaded")
  def orb_getScoreType(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getScoreType not loaded")
  def orb_getWTA_K(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::getWTA_K not loaded")
  def orb_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::read not loaded")
  def orb_setEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setEdgeThreshold not loaded")
  def orb_setFastThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setFastThreshold not loaded")
  def orb_setFirstLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setFirstLevel not loaded")
  def orb_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setMaxFeatures not loaded")
  def orb_setNLevels(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setNLevels not loaded")
  def orb_setPatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setPatchSize not loaded")
  def orb_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setScaleFactor not loaded")
  def orb_setScoreType(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setScoreType not loaded")
  def orb_setWTA_K(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::setWTA_K not loaded")
  def orb_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ORB::write not loaded")
  def pyRotationWarper_PyRotationWarper(_opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::PyRotationWarper not loaded")
  def pyRotationWarper_buildMaps(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::buildMaps not loaded")
  def pyRotationWarper_getScale(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::getScale not loaded")
  def pyRotationWarper_setScale(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::setScale not loaded")
  def pyRotationWarper_warp(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::warp not loaded")
  def pyRotationWarper_warpBackward(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::warpBackward not loaded")
  def pyRotationWarper_warpPoint(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::warpPoint not loaded")
  def pyRotationWarper_warpPointBackward(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::warpPointBackward not loaded")
  def pyRotationWarper_warpRoi(_self, _opts \\ []), do: :erlang.nif_error("cv::PyRotationWarper::warpRoi not loaded")
  def qrCodeDetector_QRCodeDetector(_opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::QRCodeDetector not loaded")
  def qrCodeDetector_decode(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::decode not loaded")
  def qrCodeDetector_decodeCurved(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::decodeCurved not loaded")
  def qrCodeDetector_decodeMulti(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::decodeMulti not loaded")
  def qrCodeDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::detect not loaded")
  def qrCodeDetector_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::detectAndDecode not loaded")
  def qrCodeDetector_detectAndDecodeCurved(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::detectAndDecodeCurved not loaded")
  def qrCodeDetector_detectAndDecodeMulti(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::detectAndDecodeMulti not loaded")
  def qrCodeDetector_detectMulti(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::detectMulti not loaded")
  def qrCodeDetector_setEpsX(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::setEpsX not loaded")
  def qrCodeDetector_setEpsY(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeDetector::setEpsY not loaded")
  def qrCodeEncoder_create_static(_opts \\ []), do: :erlang.nif_error("cv::QRCodeEncoder::create not loaded")
  def qrCodeEncoder_encode(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeEncoder::encode not loaded")
  def qrCodeEncoder_encodeStructuredAppend(_self, _opts \\ []), do: :erlang.nif_error("cv::QRCodeEncoder::encodeStructuredAppend not loaded")
  def qrCodeEncoder_Params_QRCodeEncoder_Params(_opts \\ []), do: :erlang.nif_error("cv::QRCodeEncoder::Params::QRCodeEncoder_Params not loaded")
  def qrCodeEncoder_Params_get_correction_level(_self), do: :erlang.nif_error("QRCodeEncoder_Params::correction_level getter not loaded")
  def qrCodeEncoder_Params_set_correction_level(_self, _prop), do: :erlang.nif_error("QRCodeEncoder_Params::correction_level setter not loaded")
  def qrCodeEncoder_Params_get_mode(_self), do: :erlang.nif_error("QRCodeEncoder_Params::mode getter not loaded")
  def qrCodeEncoder_Params_set_mode(_self, _prop), do: :erlang.nif_error("QRCodeEncoder_Params::mode setter not loaded")
  def qrCodeEncoder_Params_get_structure_number(_self), do: :erlang.nif_error("QRCodeEncoder_Params::structure_number getter not loaded")
  def qrCodeEncoder_Params_set_structure_number(_self, _prop), do: :erlang.nif_error("QRCodeEncoder_Params::structure_number setter not loaded")
  def qrCodeEncoder_Params_get_version(_self), do: :erlang.nif_error("QRCodeEncoder_Params::version getter not loaded")
  def qrCodeEncoder_Params_set_version(_self, _prop), do: :erlang.nif_error("QRCodeEncoder_Params::version setter not loaded")
  def sift_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::compute not loaded")
  def sift_create_static(_opts \\ []), do: :erlang.nif_error("cv::SIFT::create not loaded")
  def sift_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::defaultNorm not loaded")
  def sift_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::descriptorSize not loaded")
  def sift_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::descriptorType not loaded")
  def sift_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::detect not loaded")
  def sift_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::detectAndCompute not loaded")
  def sift_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::empty not loaded")
  def sift_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::getDefaultName not loaded")
  def sift_read(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::read not loaded")
  def sift_write(_self, _opts \\ []), do: :erlang.nif_error("cv::SIFT::write not loaded")
  def simpleBlobDetector_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::compute not loaded")
  def simpleBlobDetector_create_static(_opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::create not loaded")
  def simpleBlobDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::defaultNorm not loaded")
  def simpleBlobDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::descriptorSize not loaded")
  def simpleBlobDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::descriptorType not loaded")
  def simpleBlobDetector_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::detect not loaded")
  def simpleBlobDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::detectAndCompute not loaded")
  def simpleBlobDetector_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::empty not loaded")
  def simpleBlobDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::getDefaultName not loaded")
  def simpleBlobDetector_read(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::read not loaded")
  def simpleBlobDetector_write(_self, _opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::write not loaded")
  def simpleBlobDetector_Params_SimpleBlobDetector_Params(_opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector::Params::SimpleBlobDetector_Params not loaded")
  def simpleBlobDetector_Params_get_blobColor(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::blobColor getter not loaded")
  def simpleBlobDetector_Params_set_blobColor(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::blobColor setter not loaded")
  def simpleBlobDetector_Params_get_filterByArea(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByArea getter not loaded")
  def simpleBlobDetector_Params_set_filterByArea(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByArea setter not loaded")
  def simpleBlobDetector_Params_get_filterByCircularity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByCircularity getter not loaded")
  def simpleBlobDetector_Params_set_filterByCircularity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByCircularity setter not loaded")
  def simpleBlobDetector_Params_get_filterByColor(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByColor getter not loaded")
  def simpleBlobDetector_Params_set_filterByColor(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByColor setter not loaded")
  def simpleBlobDetector_Params_get_filterByConvexity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByConvexity getter not loaded")
  def simpleBlobDetector_Params_set_filterByConvexity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByConvexity setter not loaded")
  def simpleBlobDetector_Params_get_filterByInertia(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByInertia getter not loaded")
  def simpleBlobDetector_Params_set_filterByInertia(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::filterByInertia setter not loaded")
  def simpleBlobDetector_Params_get_maxArea(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::maxArea getter not loaded")
  def simpleBlobDetector_Params_set_maxArea(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::maxArea setter not loaded")
  def simpleBlobDetector_Params_get_maxCircularity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::maxCircularity getter not loaded")
  def simpleBlobDetector_Params_set_maxCircularity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::maxCircularity setter not loaded")
  def simpleBlobDetector_Params_get_maxConvexity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::maxConvexity getter not loaded")
  def simpleBlobDetector_Params_set_maxConvexity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::maxConvexity setter not loaded")
  def simpleBlobDetector_Params_get_maxInertiaRatio(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::maxInertiaRatio getter not loaded")
  def simpleBlobDetector_Params_set_maxInertiaRatio(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::maxInertiaRatio setter not loaded")
  def simpleBlobDetector_Params_get_maxThreshold(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::maxThreshold getter not loaded")
  def simpleBlobDetector_Params_set_maxThreshold(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::maxThreshold setter not loaded")
  def simpleBlobDetector_Params_get_minArea(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minArea getter not loaded")
  def simpleBlobDetector_Params_set_minArea(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minArea setter not loaded")
  def simpleBlobDetector_Params_get_minCircularity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minCircularity getter not loaded")
  def simpleBlobDetector_Params_set_minCircularity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minCircularity setter not loaded")
  def simpleBlobDetector_Params_get_minConvexity(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minConvexity getter not loaded")
  def simpleBlobDetector_Params_set_minConvexity(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minConvexity setter not loaded")
  def simpleBlobDetector_Params_get_minDistBetweenBlobs(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minDistBetweenBlobs getter not loaded")
  def simpleBlobDetector_Params_set_minDistBetweenBlobs(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minDistBetweenBlobs setter not loaded")
  def simpleBlobDetector_Params_get_minInertiaRatio(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minInertiaRatio getter not loaded")
  def simpleBlobDetector_Params_set_minInertiaRatio(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minInertiaRatio setter not loaded")
  def simpleBlobDetector_Params_get_minRepeatability(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minRepeatability getter not loaded")
  def simpleBlobDetector_Params_set_minRepeatability(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minRepeatability setter not loaded")
  def simpleBlobDetector_Params_get_minThreshold(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::minThreshold getter not loaded")
  def simpleBlobDetector_Params_set_minThreshold(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::minThreshold setter not loaded")
  def simpleBlobDetector_Params_get_thresholdStep(_self), do: :erlang.nif_error("SimpleBlobDetector_Params::thresholdStep getter not loaded")
  def simpleBlobDetector_Params_set_thresholdStep(_self, _prop), do: :erlang.nif_error("SimpleBlobDetector_Params::thresholdStep setter not loaded")
  def sparseOpticalFlow_calc(_self, _opts \\ []), do: :erlang.nif_error("cv::SparseOpticalFlow::calc not loaded")
  def sparsePyrLKOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::create not loaded")
  def sparsePyrLKOpticalFlow_getFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::getFlags not loaded")
  def sparsePyrLKOpticalFlow_getMaxLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::getMaxLevel not loaded")
  def sparsePyrLKOpticalFlow_getMinEigThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::getMinEigThreshold not loaded")
  def sparsePyrLKOpticalFlow_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::getTermCriteria not loaded")
  def sparsePyrLKOpticalFlow_getWinSize(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::getWinSize not loaded")
  def sparsePyrLKOpticalFlow_setFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::setFlags not loaded")
  def sparsePyrLKOpticalFlow_setMaxLevel(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::setMaxLevel not loaded")
  def sparsePyrLKOpticalFlow_setMinEigThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::setMinEigThreshold not loaded")
  def sparsePyrLKOpticalFlow_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::setTermCriteria not loaded")
  def sparsePyrLKOpticalFlow_setWinSize(_self, _opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow::setWinSize not loaded")
  def stereoBM_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::compute not loaded")
  def stereoBM_create_static(_opts \\ []), do: :erlang.nif_error("cv::StereoBM::create not loaded")
  def stereoBM_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getBlockSize not loaded")
  def stereoBM_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getDisp12MaxDiff not loaded")
  def stereoBM_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getMinDisparity not loaded")
  def stereoBM_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getNumDisparities not loaded")
  def stereoBM_getPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getPreFilterCap not loaded")
  def stereoBM_getPreFilterSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getPreFilterSize not loaded")
  def stereoBM_getPreFilterType(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getPreFilterType not loaded")
  def stereoBM_getROI1(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getROI1 not loaded")
  def stereoBM_getROI2(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getROI2 not loaded")
  def stereoBM_getSmallerBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getSmallerBlockSize not loaded")
  def stereoBM_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getSpeckleRange not loaded")
  def stereoBM_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getSpeckleWindowSize not loaded")
  def stereoBM_getTextureThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getTextureThreshold not loaded")
  def stereoBM_getUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::getUniquenessRatio not loaded")
  def stereoBM_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setBlockSize not loaded")
  def stereoBM_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setDisp12MaxDiff not loaded")
  def stereoBM_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setMinDisparity not loaded")
  def stereoBM_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setNumDisparities not loaded")
  def stereoBM_setPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setPreFilterCap not loaded")
  def stereoBM_setPreFilterSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setPreFilterSize not loaded")
  def stereoBM_setPreFilterType(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setPreFilterType not loaded")
  def stereoBM_setROI1(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setROI1 not loaded")
  def stereoBM_setROI2(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setROI2 not loaded")
  def stereoBM_setSmallerBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setSmallerBlockSize not loaded")
  def stereoBM_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setSpeckleRange not loaded")
  def stereoBM_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setSpeckleWindowSize not loaded")
  def stereoBM_setTextureThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setTextureThreshold not loaded")
  def stereoBM_setUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoBM::setUniquenessRatio not loaded")
  def stereoMatcher_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::compute not loaded")
  def stereoMatcher_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getBlockSize not loaded")
  def stereoMatcher_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getDisp12MaxDiff not loaded")
  def stereoMatcher_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getMinDisparity not loaded")
  def stereoMatcher_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getNumDisparities not loaded")
  def stereoMatcher_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getSpeckleRange not loaded")
  def stereoMatcher_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::getSpeckleWindowSize not loaded")
  def stereoMatcher_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setBlockSize not loaded")
  def stereoMatcher_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setDisp12MaxDiff not loaded")
  def stereoMatcher_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setMinDisparity not loaded")
  def stereoMatcher_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setNumDisparities not loaded")
  def stereoMatcher_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setSpeckleRange not loaded")
  def stereoMatcher_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoMatcher::setSpeckleWindowSize not loaded")
  def stereoSGBM_compute(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::compute not loaded")
  def stereoSGBM_create_static(_opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::create not loaded")
  def stereoSGBM_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getBlockSize not loaded")
  def stereoSGBM_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getDisp12MaxDiff not loaded")
  def stereoSGBM_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getMinDisparity not loaded")
  def stereoSGBM_getMode(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getMode not loaded")
  def stereoSGBM_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getNumDisparities not loaded")
  def stereoSGBM_getP1(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getP1 not loaded")
  def stereoSGBM_getP2(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getP2 not loaded")
  def stereoSGBM_getPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getPreFilterCap not loaded")
  def stereoSGBM_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getSpeckleRange not loaded")
  def stereoSGBM_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getSpeckleWindowSize not loaded")
  def stereoSGBM_getUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::getUniquenessRatio not loaded")
  def stereoSGBM_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setBlockSize not loaded")
  def stereoSGBM_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setDisp12MaxDiff not loaded")
  def stereoSGBM_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setMinDisparity not loaded")
  def stereoSGBM_setMode(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setMode not loaded")
  def stereoSGBM_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setNumDisparities not loaded")
  def stereoSGBM_setP1(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setP1 not loaded")
  def stereoSGBM_setP2(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setP2 not loaded")
  def stereoSGBM_setPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setPreFilterCap not loaded")
  def stereoSGBM_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setSpeckleRange not loaded")
  def stereoSGBM_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setSpeckleWindowSize not loaded")
  def stereoSGBM_setUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::StereoSGBM::setUniquenessRatio not loaded")
  def stitcher_composePanorama(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::composePanorama not loaded")
  def stitcher_compositingResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::compositingResol not loaded")
  def stitcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::Stitcher::create not loaded")
  def stitcher_estimateTransform(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::estimateTransform not loaded")
  def stitcher_interpolationFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::interpolationFlags not loaded")
  def stitcher_panoConfidenceThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::panoConfidenceThresh not loaded")
  def stitcher_registrationResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::registrationResol not loaded")
  def stitcher_seamEstimationResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::seamEstimationResol not loaded")
  def stitcher_setCompositingResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setCompositingResol not loaded")
  def stitcher_setInterpolationFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setInterpolationFlags not loaded")
  def stitcher_setPanoConfidenceThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setPanoConfidenceThresh not loaded")
  def stitcher_setRegistrationResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setRegistrationResol not loaded")
  def stitcher_setSeamEstimationResol(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setSeamEstimationResol not loaded")
  def stitcher_setWaveCorrection(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::setWaveCorrection not loaded")
  def stitcher_stitch(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::stitch not loaded")
  def stitcher_waveCorrection(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::waveCorrection not loaded")
  def stitcher_workScale(_self, _opts \\ []), do: :erlang.nif_error("cv::Stitcher::workScale not loaded")
  def subdiv2D_Subdiv2D(_opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::Subdiv2D not loaded")
  def subdiv2D_edgeDst(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::edgeDst not loaded")
  def subdiv2D_edgeOrg(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::edgeOrg not loaded")
  def subdiv2D_findNearest(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::findNearest not loaded")
  def subdiv2D_getEdge(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getEdge not loaded")
  def subdiv2D_getEdgeList(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getEdgeList not loaded")
  def subdiv2D_getLeadingEdgeList(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getLeadingEdgeList not loaded")
  def subdiv2D_getTriangleList(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getTriangleList not loaded")
  def subdiv2D_getVertex(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getVertex not loaded")
  def subdiv2D_getVoronoiFacetList(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::getVoronoiFacetList not loaded")
  def subdiv2D_initDelaunay(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::initDelaunay not loaded")
  def subdiv2D_insert(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::insert not loaded")
  def subdiv2D_locate(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::locate not loaded")
  def subdiv2D_nextEdge(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::nextEdge not loaded")
  def subdiv2D_rotateEdge(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::rotateEdge not loaded")
  def subdiv2D_symEdge(_self, _opts \\ []), do: :erlang.nif_error("cv::Subdiv2D::symEdge not loaded")
  def tickMeter_TickMeter(_opts \\ []), do: :erlang.nif_error("cv::TickMeter::TickMeter not loaded")
  def tickMeter_getAvgTimeMilli(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getAvgTimeMilli not loaded")
  def tickMeter_getAvgTimeSec(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getAvgTimeSec not loaded")
  def tickMeter_getCounter(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getCounter not loaded")
  def tickMeter_getFPS(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getFPS not loaded")
  def tickMeter_getTimeMicro(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getTimeMicro not loaded")
  def tickMeter_getTimeMilli(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getTimeMilli not loaded")
  def tickMeter_getTimeSec(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getTimeSec not loaded")
  def tickMeter_getTimeTicks(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::getTimeTicks not loaded")
  def tickMeter_reset(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::reset not loaded")
  def tickMeter_start(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::start not loaded")
  def tickMeter_stop(_self, _opts \\ []), do: :erlang.nif_error("cv::TickMeter::stop not loaded")
  def tonemap_getGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::Tonemap::getGamma not loaded")
  def tonemap_process(_self, _opts \\ []), do: :erlang.nif_error("cv::Tonemap::process not loaded")
  def tonemap_setGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::Tonemap::setGamma not loaded")
  def tonemapDrago_getBias(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapDrago::getBias not loaded")
  def tonemapDrago_getSaturation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapDrago::getSaturation not loaded")
  def tonemapDrago_setBias(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapDrago::setBias not loaded")
  def tonemapDrago_setSaturation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapDrago::setSaturation not loaded")
  def tonemapMantiuk_getSaturation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapMantiuk::getSaturation not loaded")
  def tonemapMantiuk_getScale(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapMantiuk::getScale not loaded")
  def tonemapMantiuk_setSaturation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapMantiuk::setSaturation not loaded")
  def tonemapMantiuk_setScale(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapMantiuk::setScale not loaded")
  def tonemapReinhard_getColorAdaptation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::getColorAdaptation not loaded")
  def tonemapReinhard_getIntensity(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::getIntensity not loaded")
  def tonemapReinhard_getLightAdaptation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::getLightAdaptation not loaded")
  def tonemapReinhard_setColorAdaptation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::setColorAdaptation not loaded")
  def tonemapReinhard_setIntensity(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::setIntensity not loaded")
  def tonemapReinhard_setLightAdaptation(_self, _opts \\ []), do: :erlang.nif_error("cv::TonemapReinhard::setLightAdaptation not loaded")
  def tracker_init(_self, _opts \\ []), do: :erlang.nif_error("cv::Tracker::init not loaded")
  def tracker_update(_self, _opts \\ []), do: :erlang.nif_error("cv::Tracker::update not loaded")
  def trackerDaSiamRPN_create_static(_opts \\ []), do: :erlang.nif_error("cv::TrackerDaSiamRPN::create not loaded")
  def trackerDaSiamRPN_getTrackingScore(_self, _opts \\ []), do: :erlang.nif_error("cv::TrackerDaSiamRPN::getTrackingScore not loaded")
  def trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params(_opts \\ []), do: :erlang.nif_error("cv::TrackerDaSiamRPN::Params::TrackerDaSiamRPN_Params not loaded")
  def trackerDaSiamRPN_Params_get_backend(_self), do: :erlang.nif_error("TrackerDaSiamRPN_Params::backend getter not loaded")
  def trackerDaSiamRPN_Params_set_backend(_self, _prop), do: :erlang.nif_error("TrackerDaSiamRPN_Params::backend setter not loaded")
  def trackerDaSiamRPN_Params_get_kernel_cls1(_self), do: :erlang.nif_error("TrackerDaSiamRPN_Params::kernel_cls1 getter not loaded")
  def trackerDaSiamRPN_Params_set_kernel_cls1(_self, _prop), do: :erlang.nif_error("TrackerDaSiamRPN_Params::kernel_cls1 setter not loaded")
  def trackerDaSiamRPN_Params_get_kernel_r1(_self), do: :erlang.nif_error("TrackerDaSiamRPN_Params::kernel_r1 getter not loaded")
  def trackerDaSiamRPN_Params_set_kernel_r1(_self, _prop), do: :erlang.nif_error("TrackerDaSiamRPN_Params::kernel_r1 setter not loaded")
  def trackerDaSiamRPN_Params_get_model(_self), do: :erlang.nif_error("TrackerDaSiamRPN_Params::model getter not loaded")
  def trackerDaSiamRPN_Params_set_model(_self, _prop), do: :erlang.nif_error("TrackerDaSiamRPN_Params::model setter not loaded")
  def trackerDaSiamRPN_Params_get_target(_self), do: :erlang.nif_error("TrackerDaSiamRPN_Params::target getter not loaded")
  def trackerDaSiamRPN_Params_set_target(_self, _prop), do: :erlang.nif_error("TrackerDaSiamRPN_Params::target setter not loaded")
  def trackerGOTURN_create_static(_opts \\ []), do: :erlang.nif_error("cv::TrackerGOTURN::create not loaded")
  def trackerGOTURN_Params_TrackerGOTURN_Params(_opts \\ []), do: :erlang.nif_error("cv::TrackerGOTURN::Params::TrackerGOTURN_Params not loaded")
  def trackerGOTURN_Params_get_modelBin(_self), do: :erlang.nif_error("TrackerGOTURN_Params::modelBin getter not loaded")
  def trackerGOTURN_Params_set_modelBin(_self, _prop), do: :erlang.nif_error("TrackerGOTURN_Params::modelBin setter not loaded")
  def trackerGOTURN_Params_get_modelTxt(_self), do: :erlang.nif_error("TrackerGOTURN_Params::modelTxt getter not loaded")
  def trackerGOTURN_Params_set_modelTxt(_self, _prop), do: :erlang.nif_error("TrackerGOTURN_Params::modelTxt setter not loaded")
  def trackerMIL_create_static(_opts \\ []), do: :erlang.nif_error("cv::TrackerMIL::create not loaded")
  def trackerMIL_Params_TrackerMIL_Params(_opts \\ []), do: :erlang.nif_error("cv::TrackerMIL::Params::TrackerMIL_Params not loaded")
  def trackerMIL_Params_get_featureSetNumFeatures(_self), do: :erlang.nif_error("TrackerMIL_Params::featureSetNumFeatures getter not loaded")
  def trackerMIL_Params_set_featureSetNumFeatures(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::featureSetNumFeatures setter not loaded")
  def trackerMIL_Params_get_samplerInitInRadius(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerInitInRadius getter not loaded")
  def trackerMIL_Params_set_samplerInitInRadius(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerInitInRadius setter not loaded")
  def trackerMIL_Params_get_samplerInitMaxNegNum(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerInitMaxNegNum getter not loaded")
  def trackerMIL_Params_set_samplerInitMaxNegNum(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerInitMaxNegNum setter not loaded")
  def trackerMIL_Params_get_samplerSearchWinSize(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerSearchWinSize getter not loaded")
  def trackerMIL_Params_set_samplerSearchWinSize(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerSearchWinSize setter not loaded")
  def trackerMIL_Params_get_samplerTrackInRadius(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackInRadius getter not loaded")
  def trackerMIL_Params_set_samplerTrackInRadius(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackInRadius setter not loaded")
  def trackerMIL_Params_get_samplerTrackMaxNegNum(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackMaxNegNum getter not loaded")
  def trackerMIL_Params_set_samplerTrackMaxNegNum(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackMaxNegNum setter not loaded")
  def trackerMIL_Params_get_samplerTrackMaxPosNum(_self), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackMaxPosNum getter not loaded")
  def trackerMIL_Params_set_samplerTrackMaxPosNum(_self, _prop), do: :erlang.nif_error("TrackerMIL_Params::samplerTrackMaxPosNum setter not loaded")
  def uMat_UMat(_opts \\ []), do: :erlang.nif_error("cv::UMat::UMat not loaded")
  def uMat_context_static(_opts \\ []), do: :erlang.nif_error("cv::UMat::context not loaded")
  def uMat_get(_self, _opts \\ []), do: :erlang.nif_error("cv::UMat::get not loaded")
  def uMat_handle(_self, _opts \\ []), do: :erlang.nif_error("cv::UMat::handle not loaded")
  def uMat_isContinuous(_self, _opts \\ []), do: :erlang.nif_error("cv::UMat::isContinuous not loaded")
  def uMat_isSubmatrix(_self, _opts \\ []), do: :erlang.nif_error("cv::UMat::isSubmatrix not loaded")
  def uMat_queue_static(_opts \\ []), do: :erlang.nif_error("cv::UMat::queue not loaded")
  def uMat_get_offset(_self), do: :erlang.nif_error("UMat::offset getter not loaded")
  def uMat_set_offset(_self, _prop), do: :erlang.nif_error("UMat::offset setter not loaded")
  def usacParams_UsacParams(_opts \\ []), do: :erlang.nif_error("cv::UsacParams::UsacParams not loaded")
  def usacParams_get_confidence(_self), do: :erlang.nif_error("UsacParams::confidence getter not loaded")
  def usacParams_set_confidence(_self, _prop), do: :erlang.nif_error("UsacParams::confidence setter not loaded")
  def usacParams_get_isParallel(_self), do: :erlang.nif_error("UsacParams::isParallel getter not loaded")
  def usacParams_set_isParallel(_self, _prop), do: :erlang.nif_error("UsacParams::isParallel setter not loaded")
  def usacParams_get_loIterations(_self), do: :erlang.nif_error("UsacParams::loIterations getter not loaded")
  def usacParams_set_loIterations(_self, _prop), do: :erlang.nif_error("UsacParams::loIterations setter not loaded")
  def usacParams_get_loMethod(_self), do: :erlang.nif_error("UsacParams::loMethod getter not loaded")
  def usacParams_set_loMethod(_self, _prop), do: :erlang.nif_error("UsacParams::loMethod setter not loaded")
  def usacParams_get_loSampleSize(_self), do: :erlang.nif_error("UsacParams::loSampleSize getter not loaded")
  def usacParams_set_loSampleSize(_self, _prop), do: :erlang.nif_error("UsacParams::loSampleSize setter not loaded")
  def usacParams_get_maxIterations(_self), do: :erlang.nif_error("UsacParams::maxIterations getter not loaded")
  def usacParams_set_maxIterations(_self, _prop), do: :erlang.nif_error("UsacParams::maxIterations setter not loaded")
  def usacParams_get_neighborsSearch(_self), do: :erlang.nif_error("UsacParams::neighborsSearch getter not loaded")
  def usacParams_set_neighborsSearch(_self, _prop), do: :erlang.nif_error("UsacParams::neighborsSearch setter not loaded")
  def usacParams_get_randomGeneratorState(_self), do: :erlang.nif_error("UsacParams::randomGeneratorState getter not loaded")
  def usacParams_set_randomGeneratorState(_self, _prop), do: :erlang.nif_error("UsacParams::randomGeneratorState setter not loaded")
  def usacParams_get_sampler(_self), do: :erlang.nif_error("UsacParams::sampler getter not loaded")
  def usacParams_set_sampler(_self, _prop), do: :erlang.nif_error("UsacParams::sampler setter not loaded")
  def usacParams_get_score(_self), do: :erlang.nif_error("UsacParams::score getter not loaded")
  def usacParams_set_score(_self, _prop), do: :erlang.nif_error("UsacParams::score setter not loaded")
  def usacParams_get_threshold(_self), do: :erlang.nif_error("UsacParams::threshold getter not loaded")
  def usacParams_set_threshold(_self, _prop), do: :erlang.nif_error("UsacParams::threshold setter not loaded")
  def variationalRefinement_calcUV(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::calcUV not loaded")
  def variationalRefinement_create_static(_opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::create not loaded")
  def variationalRefinement_getAlpha(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getAlpha not loaded")
  def variationalRefinement_getDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getDelta not loaded")
  def variationalRefinement_getFixedPointIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getFixedPointIterations not loaded")
  def variationalRefinement_getGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getGamma not loaded")
  def variationalRefinement_getOmega(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getOmega not loaded")
  def variationalRefinement_getSorIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::getSorIterations not loaded")
  def variationalRefinement_setAlpha(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setAlpha not loaded")
  def variationalRefinement_setDelta(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setDelta not loaded")
  def variationalRefinement_setFixedPointIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setFixedPointIterations not loaded")
  def variationalRefinement_setGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setGamma not loaded")
  def variationalRefinement_setOmega(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setOmega not loaded")
  def variationalRefinement_setSorIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement::setSorIterations not loaded")
  def videoCapture_VideoCapture(_opts \\ []), do: :erlang.nif_error("cv::VideoCapture::VideoCapture not loaded")
  def videoCapture_get(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::get not loaded")
  def videoCapture_getBackendName(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::getBackendName not loaded")
  def videoCapture_getExceptionMode(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::getExceptionMode not loaded")
  def videoCapture_grab(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::grab not loaded")
  def videoCapture_isOpened(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::isOpened not loaded")
  def videoCapture_open(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::open not loaded")
  def videoCapture_read(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::read not loaded")
  def videoCapture_release(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::release not loaded")
  def videoCapture_retrieve(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::retrieve not loaded")
  def videoCapture_set(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::set not loaded")
  def videoCapture_setExceptionMode(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoCapture::setExceptionMode not loaded")
  def videoWriter_VideoWriter(_opts \\ []), do: :erlang.nif_error("cv::VideoWriter::VideoWriter not loaded")
  def videoWriter_fourcc_static(_opts \\ []), do: :erlang.nif_error("cv::VideoWriter::fourcc not loaded")
  def videoWriter_get(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::get not loaded")
  def videoWriter_getBackendName(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::getBackendName not loaded")
  def videoWriter_isOpened(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::isOpened not loaded")
  def videoWriter_open(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::open not loaded")
  def videoWriter_release(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::release not loaded")
  def videoWriter_set(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::set not loaded")
  def videoWriter_write(_self, _opts \\ []), do: :erlang.nif_error("cv::VideoWriter::write not loaded")
  def cuda_cuda_BufferPool_BufferPool(_opts \\ []), do: :erlang.nif_error("cv::cuda::BufferPool::cuda_BufferPool not loaded")
  def cuda_cuda_BufferPool_getAllocator(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::BufferPool::getAllocator not loaded")
  def cuda_cuda_BufferPool_getBuffer(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::BufferPool::getBuffer not loaded")
  def cuda_cuda_DeviceInfo_DeviceInfo(_opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::cuda_DeviceInfo not loaded")
  def cuda_cuda_DeviceInfo_ECCEnabled(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::ECCEnabled not loaded")
  def cuda_cuda_DeviceInfo_asyncEngineCount(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::asyncEngineCount not loaded")
  def cuda_cuda_DeviceInfo_canMapHostMemory(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::canMapHostMemory not loaded")
  def cuda_cuda_DeviceInfo_clockRate(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::clockRate not loaded")
  def cuda_cuda_DeviceInfo_computeMode(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::computeMode not loaded")
  def cuda_cuda_DeviceInfo_concurrentKernels(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::concurrentKernels not loaded")
  def cuda_cuda_DeviceInfo_deviceID(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::deviceID not loaded")
  def cuda_cuda_DeviceInfo_freeMemory(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::freeMemory not loaded")
  def cuda_cuda_DeviceInfo_integrated(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::integrated not loaded")
  def cuda_cuda_DeviceInfo_isCompatible(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::isCompatible not loaded")
  def cuda_cuda_DeviceInfo_kernelExecTimeoutEnabled(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::kernelExecTimeoutEnabled not loaded")
  def cuda_cuda_DeviceInfo_l2CacheSize(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::l2CacheSize not loaded")
  def cuda_cuda_DeviceInfo_majorVersion(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::majorVersion not loaded")
  def cuda_cuda_DeviceInfo_maxGridSize(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxGridSize not loaded")
  def cuda_cuda_DeviceInfo_maxSurface1D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurface1D not loaded")
  def cuda_cuda_DeviceInfo_maxSurface1DLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurface1DLayered not loaded")
  def cuda_cuda_DeviceInfo_maxSurface2D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurface2D not loaded")
  def cuda_cuda_DeviceInfo_maxSurface2DLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurface2DLayered not loaded")
  def cuda_cuda_DeviceInfo_maxSurface3D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurface3D not loaded")
  def cuda_cuda_DeviceInfo_maxSurfaceCubemap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurfaceCubemap not loaded")
  def cuda_cuda_DeviceInfo_maxSurfaceCubemapLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxSurfaceCubemapLayered not loaded")
  def cuda_cuda_DeviceInfo_maxTexture1D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture1D not loaded")
  def cuda_cuda_DeviceInfo_maxTexture1DLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture1DLayered not loaded")
  def cuda_cuda_DeviceInfo_maxTexture1DLinear(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture1DLinear not loaded")
  def cuda_cuda_DeviceInfo_maxTexture1DMipmap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture1DMipmap not loaded")
  def cuda_cuda_DeviceInfo_maxTexture2D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture2D not loaded")
  def cuda_cuda_DeviceInfo_maxTexture2DGather(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture2DGather not loaded")
  def cuda_cuda_DeviceInfo_maxTexture2DLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture2DLayered not loaded")
  def cuda_cuda_DeviceInfo_maxTexture2DLinear(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture2DLinear not loaded")
  def cuda_cuda_DeviceInfo_maxTexture2DMipmap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture2DMipmap not loaded")
  def cuda_cuda_DeviceInfo_maxTexture3D(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTexture3D not loaded")
  def cuda_cuda_DeviceInfo_maxTextureCubemap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTextureCubemap not loaded")
  def cuda_cuda_DeviceInfo_maxTextureCubemapLayered(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxTextureCubemapLayered not loaded")
  def cuda_cuda_DeviceInfo_maxThreadsDim(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxThreadsDim not loaded")
  def cuda_cuda_DeviceInfo_maxThreadsPerBlock(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxThreadsPerBlock not loaded")
  def cuda_cuda_DeviceInfo_maxThreadsPerMultiProcessor(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::maxThreadsPerMultiProcessor not loaded")
  def cuda_cuda_DeviceInfo_memPitch(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::memPitch not loaded")
  def cuda_cuda_DeviceInfo_memoryBusWidth(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::memoryBusWidth not loaded")
  def cuda_cuda_DeviceInfo_memoryClockRate(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::memoryClockRate not loaded")
  def cuda_cuda_DeviceInfo_minorVersion(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::minorVersion not loaded")
  def cuda_cuda_DeviceInfo_multiProcessorCount(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::multiProcessorCount not loaded")
  def cuda_cuda_DeviceInfo_pciBusID(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::pciBusID not loaded")
  def cuda_cuda_DeviceInfo_pciDeviceID(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::pciDeviceID not loaded")
  def cuda_cuda_DeviceInfo_pciDomainID(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::pciDomainID not loaded")
  def cuda_cuda_DeviceInfo_queryMemory(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::queryMemory not loaded")
  def cuda_cuda_DeviceInfo_regsPerBlock(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::regsPerBlock not loaded")
  def cuda_cuda_DeviceInfo_sharedMemPerBlock(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::sharedMemPerBlock not loaded")
  def cuda_cuda_DeviceInfo_surfaceAlignment(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::surfaceAlignment not loaded")
  def cuda_cuda_DeviceInfo_tccDriver(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::tccDriver not loaded")
  def cuda_cuda_DeviceInfo_textureAlignment(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::textureAlignment not loaded")
  def cuda_cuda_DeviceInfo_texturePitchAlignment(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::texturePitchAlignment not loaded")
  def cuda_cuda_DeviceInfo_totalConstMem(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::totalConstMem not loaded")
  def cuda_cuda_DeviceInfo_totalGlobalMem(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::totalGlobalMem not loaded")
  def cuda_cuda_DeviceInfo_totalMemory(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::totalMemory not loaded")
  def cuda_cuda_DeviceInfo_unifiedAddressing(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::unifiedAddressing not loaded")
  def cuda_cuda_DeviceInfo_warpSize(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::DeviceInfo::warpSize not loaded")
  def cuda_cuda_Event_Event(_opts \\ []), do: :erlang.nif_error("cv::cuda::Event::cuda_Event not loaded")
  def cuda_cuda_Event_elapsedTime_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::Event::elapsedTime not loaded")
  def cuda_cuda_Event_queryIfComplete(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Event::queryIfComplete not loaded")
  def cuda_cuda_Event_record(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Event::record not loaded")
  def cuda_cuda_Event_waitForCompletion(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Event::waitForCompletion not loaded")
  def cuda_cuda_GpuMat_GpuMat(_opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::cuda_GpuMat not loaded")
  def cuda_cuda_GpuMat_adjustROI(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::adjustROI not loaded")
  def cuda_cuda_GpuMat_assignTo(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::assignTo not loaded")
  def cuda_cuda_GpuMat_channels(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::channels not loaded")
  def cuda_cuda_GpuMat_clone(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::clone not loaded")
  def cuda_cuda_GpuMat_col(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::col not loaded")
  def cuda_cuda_GpuMat_colRange(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::colRange not loaded")
  def cuda_cuda_GpuMat_convertTo(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::convertTo not loaded")
  def cuda_cuda_GpuMat_copyTo(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::copyTo not loaded")
  def cuda_cuda_GpuMat_create(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::create not loaded")
  def cuda_cuda_GpuMat_cudaPtr(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::cudaPtr not loaded")
  def cuda_cuda_GpuMat_defaultAllocator_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::defaultAllocator not loaded")
  def cuda_cuda_GpuMat_depth(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::depth not loaded")
  def cuda_cuda_GpuMat_download(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::download not loaded")
  def cuda_cuda_GpuMat_elemSize(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::elemSize not loaded")
  def cuda_cuda_GpuMat_elemSize1(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::elemSize1 not loaded")
  def cuda_cuda_GpuMat_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::empty not loaded")
  def cuda_cuda_GpuMat_isContinuous(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::isContinuous not loaded")
  def cuda_cuda_GpuMat_locateROI(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::locateROI not loaded")
  def cuda_cuda_GpuMat_release(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::release not loaded")
  def cuda_cuda_GpuMat_reshape(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::reshape not loaded")
  def cuda_cuda_GpuMat_row(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::row not loaded")
  def cuda_cuda_GpuMat_rowRange(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::rowRange not loaded")
  def cuda_cuda_GpuMat_setDefaultAllocator_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::setDefaultAllocator not loaded")
  def cuda_cuda_GpuMat_setTo(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::setTo not loaded")
  def cuda_cuda_GpuMat_size(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::size not loaded")
  def cuda_cuda_GpuMat_step1(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::step1 not loaded")
  def cuda_cuda_GpuMat_swap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::swap not loaded")
  def cuda_cuda_GpuMat_type(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::type not loaded")
  def cuda_cuda_GpuMat_updateContinuityFlag(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::updateContinuityFlag not loaded")
  def cuda_cuda_GpuMat_upload(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::GpuMat::upload not loaded")
  def cuda_GpuMat_get_step(_self), do: :erlang.nif_error("cuda_GpuMat::step getter not loaded")
  def cuda_cuda_HostMem_HostMem(_opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::cuda_HostMem not loaded")
  def cuda_cuda_HostMem_channels(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::channels not loaded")
  def cuda_cuda_HostMem_clone(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::clone not loaded")
  def cuda_cuda_HostMem_create(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::create not loaded")
  def cuda_cuda_HostMem_createMatHeader(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::createMatHeader not loaded")
  def cuda_cuda_HostMem_depth(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::depth not loaded")
  def cuda_cuda_HostMem_elemSize(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::elemSize not loaded")
  def cuda_cuda_HostMem_elemSize1(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::elemSize1 not loaded")
  def cuda_cuda_HostMem_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::empty not loaded")
  def cuda_cuda_HostMem_isContinuous(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::isContinuous not loaded")
  def cuda_cuda_HostMem_reshape(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::reshape not loaded")
  def cuda_cuda_HostMem_size(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::size not loaded")
  def cuda_cuda_HostMem_step1(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::step1 not loaded")
  def cuda_cuda_HostMem_swap(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::swap not loaded")
  def cuda_cuda_HostMem_type(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::HostMem::type not loaded")
  def cuda_HostMem_get_step(_self), do: :erlang.nif_error("cuda_HostMem::step getter not loaded")
  def cuda_cuda_Stream_Stream(_opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::cuda_Stream not loaded")
  def cuda_cuda_Stream_Null_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::Null not loaded")
  def cuda_cuda_Stream_cudaPtr(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::cudaPtr not loaded")
  def cuda_cuda_Stream_queryIfComplete(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::queryIfComplete not loaded")
  def cuda_cuda_Stream_waitEvent(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::waitEvent not loaded")
  def cuda_cuda_Stream_waitForCompletion(_self, _opts \\ []), do: :erlang.nif_error("cv::cuda::Stream::waitForCompletion not loaded")
  def cuda_cuda_TargetArchs_has_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::has not loaded")
  def cuda_cuda_TargetArchs_hasBin_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasBin not loaded")
  def cuda_cuda_TargetArchs_hasEqualOrGreater_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasEqualOrGreater not loaded")
  def cuda_cuda_TargetArchs_hasEqualOrGreaterBin_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasEqualOrGreaterBin not loaded")
  def cuda_cuda_TargetArchs_hasEqualOrGreaterPtx_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasEqualOrGreaterPtx not loaded")
  def cuda_cuda_TargetArchs_hasEqualOrLessPtx_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasEqualOrLessPtx not loaded")
  def cuda_cuda_TargetArchs_hasPtx_static(_opts \\ []), do: :erlang.nif_error("cv::cuda::TargetArchs::hasPtx not loaded")
  def detail_detail_AffineBasedEstimator_AffineBasedEstimator(_opts \\ []), do: :erlang.nif_error("cv::detail::AffineBasedEstimator::detail_AffineBasedEstimator not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher(_opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::detail_AffineBestOf2NearestMatcher not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::apply not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::apply2 not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::collectGarbage not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::create not loaded")
  def detail_detail_AffineBestOf2NearestMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::AffineBestOf2NearestMatcher::isThreadSafe not loaded")
  def detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher(_opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::detail_BestOf2NearestMatcher not loaded")
  def detail_detail_BestOf2NearestMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::apply not loaded")
  def detail_detail_BestOf2NearestMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::apply2 not loaded")
  def detail_detail_BestOf2NearestMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::collectGarbage not loaded")
  def detail_detail_BestOf2NearestMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::create not loaded")
  def detail_detail_BestOf2NearestMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestMatcher::isThreadSafe not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher(_opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::detail_BestOf2NearestRangeMatcher not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::apply not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::apply2 not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::collectGarbage not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_create_static(_opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::create not loaded")
  def detail_detail_BestOf2NearestRangeMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BestOf2NearestRangeMatcher::isThreadSafe not loaded")
  def detail_detail_Blender_blend(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Blender::blend not loaded")
  def detail_detail_Blender_createDefault_static(_opts \\ []), do: :erlang.nif_error("cv::detail::Blender::createDefault not loaded")
  def detail_detail_Blender_feed(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Blender::feed not loaded")
  def detail_detail_Blender_prepare(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Blender::prepare not loaded")
  def detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator(_opts \\ []), do: :erlang.nif_error("cv::detail::BlocksChannelsCompensator::detail_BlocksChannelsCompensator not loaded")
  def detail_detail_BlocksCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::apply not loaded")
  def detail_detail_BlocksCompensator_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::getBlockSize not loaded")
  def detail_detail_BlocksCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::getMatGains not loaded")
  def detail_detail_BlocksCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::getNrFeeds not loaded")
  def detail_detail_BlocksCompensator_getNrGainsFilteringIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::getNrGainsFilteringIterations not loaded")
  def detail_detail_BlocksCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::getSimilarityThreshold not loaded")
  def detail_detail_BlocksCompensator_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::setBlockSize not loaded")
  def detail_detail_BlocksCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::setMatGains not loaded")
  def detail_detail_BlocksCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::setNrFeeds not loaded")
  def detail_detail_BlocksCompensator_setNrGainsFilteringIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::setNrGainsFilteringIterations not loaded")
  def detail_detail_BlocksCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksCompensator::setSimilarityThreshold not loaded")
  def detail_detail_BlocksGainCompensator_BlocksGainCompensator(_opts \\ []), do: :erlang.nif_error("cv::detail::BlocksGainCompensator::detail_BlocksGainCompensator not loaded")
  def detail_detail_BlocksGainCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksGainCompensator::apply not loaded")
  def detail_detail_BlocksGainCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksGainCompensator::getMatGains not loaded")
  def detail_detail_BlocksGainCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BlocksGainCompensator::setMatGains not loaded")
  def detail_detail_BundleAdjusterAffine_BundleAdjusterAffine(_opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterAffine::detail_BundleAdjusterAffine not loaded")
  def detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial(_opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterAffinePartial::detail_BundleAdjusterAffinePartial not loaded")
  def detail_detail_BundleAdjusterBase_confThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::confThresh not loaded")
  def detail_detail_BundleAdjusterBase_refinementMask(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::refinementMask not loaded")
  def detail_detail_BundleAdjusterBase_setConfThresh(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::setConfThresh not loaded")
  def detail_detail_BundleAdjusterBase_setRefinementMask(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::setRefinementMask not loaded")
  def detail_detail_BundleAdjusterBase_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::setTermCriteria not loaded")
  def detail_detail_BundleAdjusterBase_termCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterBase::termCriteria not loaded")
  def detail_detail_BundleAdjusterRay_BundleAdjusterRay(_opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterRay::detail_BundleAdjusterRay not loaded")
  def detail_detail_BundleAdjusterReproj_BundleAdjusterReproj(_opts \\ []), do: :erlang.nif_error("cv::detail::BundleAdjusterReproj::detail_BundleAdjusterReproj not loaded")
  def detail_detail_CameraParams_K(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::CameraParams::K not loaded")
  def detail_CameraParams_get_R(_self), do: :erlang.nif_error("detail_CameraParams::R getter not loaded")
  def detail_CameraParams_set_R(_self, _prop), do: :erlang.nif_error("detail_CameraParams::R setter not loaded")
  def detail_CameraParams_get_aspect(_self), do: :erlang.nif_error("detail_CameraParams::aspect getter not loaded")
  def detail_CameraParams_set_aspect(_self, _prop), do: :erlang.nif_error("detail_CameraParams::aspect setter not loaded")
  def detail_CameraParams_get_focal(_self), do: :erlang.nif_error("detail_CameraParams::focal getter not loaded")
  def detail_CameraParams_set_focal(_self, _prop), do: :erlang.nif_error("detail_CameraParams::focal setter not loaded")
  def detail_CameraParams_get_ppx(_self), do: :erlang.nif_error("detail_CameraParams::ppx getter not loaded")
  def detail_CameraParams_set_ppx(_self, _prop), do: :erlang.nif_error("detail_CameraParams::ppx setter not loaded")
  def detail_CameraParams_get_ppy(_self), do: :erlang.nif_error("detail_CameraParams::ppy getter not loaded")
  def detail_CameraParams_set_ppy(_self, _prop), do: :erlang.nif_error("detail_CameraParams::ppy setter not loaded")
  def detail_CameraParams_get_t(_self), do: :erlang.nif_error("detail_CameraParams::t getter not loaded")
  def detail_CameraParams_set_t(_self, _prop), do: :erlang.nif_error("detail_CameraParams::t setter not loaded")
  def detail_detail_ChannelsCompensator_ChannelsCompensator(_opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::detail_ChannelsCompensator not loaded")
  def detail_detail_ChannelsCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::apply not loaded")
  def detail_detail_ChannelsCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::getMatGains not loaded")
  def detail_detail_ChannelsCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::getNrFeeds not loaded")
  def detail_detail_ChannelsCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::getSimilarityThreshold not loaded")
  def detail_detail_ChannelsCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::setMatGains not loaded")
  def detail_detail_ChannelsCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::setNrFeeds not loaded")
  def detail_detail_ChannelsCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ChannelsCompensator::setSimilarityThreshold not loaded")
  def detail_detail_DpSeamFinder_DpSeamFinder(_opts \\ []), do: :erlang.nif_error("cv::detail::DpSeamFinder::detail_DpSeamFinder not loaded")
  def detail_detail_DpSeamFinder_setCostFunction(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::DpSeamFinder::setCostFunction not loaded")
  def detail_detail_Estimator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Estimator::apply not loaded")
  def detail_detail_ExposureCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::apply not loaded")
  def detail_detail_ExposureCompensator_createDefault_static(_opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::createDefault not loaded")
  def detail_detail_ExposureCompensator_feed(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::feed not loaded")
  def detail_detail_ExposureCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::getMatGains not loaded")
  def detail_detail_ExposureCompensator_getUpdateGain(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::getUpdateGain not loaded")
  def detail_detail_ExposureCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::setMatGains not loaded")
  def detail_detail_ExposureCompensator_setUpdateGain(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ExposureCompensator::setUpdateGain not loaded")
  def detail_detail_FeatherBlender_FeatherBlender(_opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::detail_FeatherBlender not loaded")
  def detail_detail_FeatherBlender_blend(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::blend not loaded")
  def detail_detail_FeatherBlender_createWeightMaps(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::createWeightMaps not loaded")
  def detail_detail_FeatherBlender_feed(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::feed not loaded")
  def detail_detail_FeatherBlender_prepare(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::prepare not loaded")
  def detail_detail_FeatherBlender_setSharpness(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::setSharpness not loaded")
  def detail_detail_FeatherBlender_sharpness(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeatherBlender::sharpness not loaded")
  def detail_detail_FeaturesMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeaturesMatcher::apply not loaded")
  def detail_detail_FeaturesMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeaturesMatcher::apply2 not loaded")
  def detail_detail_FeaturesMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeaturesMatcher::collectGarbage not loaded")
  def detail_detail_FeaturesMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::FeaturesMatcher::isThreadSafe not loaded")
  def detail_detail_GainCompensator_GainCompensator(_opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::detail_GainCompensator not loaded")
  def detail_detail_GainCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::apply not loaded")
  def detail_detail_GainCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::getMatGains not loaded")
  def detail_detail_GainCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::getNrFeeds not loaded")
  def detail_detail_GainCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::getSimilarityThreshold not loaded")
  def detail_detail_GainCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::setMatGains not loaded")
  def detail_detail_GainCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::setNrFeeds not loaded")
  def detail_detail_GainCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GainCompensator::setSimilarityThreshold not loaded")
  def detail_detail_GraphCutSeamFinder_GraphCutSeamFinder(_opts \\ []), do: :erlang.nif_error("cv::detail::GraphCutSeamFinder::detail_GraphCutSeamFinder not loaded")
  def detail_detail_GraphCutSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::GraphCutSeamFinder::find not loaded")
  def detail_detail_HomographyBasedEstimator_HomographyBasedEstimator(_opts \\ []), do: :erlang.nif_error("cv::detail::HomographyBasedEstimator::detail_HomographyBasedEstimator not loaded")
  def detail_detail_ImageFeatures_getKeypoints(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::ImageFeatures::getKeypoints not loaded")
  def detail_ImageFeatures_get_descriptors(_self), do: :erlang.nif_error("detail_ImageFeatures::descriptors getter not loaded")
  def detail_ImageFeatures_set_descriptors(_self, _prop), do: :erlang.nif_error("detail_ImageFeatures::descriptors setter not loaded")
  def detail_ImageFeatures_get_img_idx(_self), do: :erlang.nif_error("detail_ImageFeatures::img_idx getter not loaded")
  def detail_ImageFeatures_set_img_idx(_self, _prop), do: :erlang.nif_error("detail_ImageFeatures::img_idx setter not loaded")
  def detail_ImageFeatures_get_img_size(_self), do: :erlang.nif_error("detail_ImageFeatures::img_size getter not loaded")
  def detail_ImageFeatures_set_img_size(_self, _prop), do: :erlang.nif_error("detail_ImageFeatures::img_size setter not loaded")
  def detail_ImageFeatures_get_keypoints(_self), do: :erlang.nif_error("detail_ImageFeatures::keypoints getter not loaded")
  def detail_ImageFeatures_set_keypoints(_self, _prop), do: :erlang.nif_error("detail_ImageFeatures::keypoints setter not loaded")
  def detail_detail_MatchesInfo_getInliers(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MatchesInfo::getInliers not loaded")
  def detail_detail_MatchesInfo_getMatches(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MatchesInfo::getMatches not loaded")
  def detail_MatchesInfo_get_H(_self), do: :erlang.nif_error("detail_MatchesInfo::H getter not loaded")
  def detail_MatchesInfo_set_H(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::H setter not loaded")
  def detail_MatchesInfo_get_confidence(_self), do: :erlang.nif_error("detail_MatchesInfo::confidence getter not loaded")
  def detail_MatchesInfo_set_confidence(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::confidence setter not loaded")
  def detail_MatchesInfo_get_dst_img_idx(_self), do: :erlang.nif_error("detail_MatchesInfo::dst_img_idx getter not loaded")
  def detail_MatchesInfo_set_dst_img_idx(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::dst_img_idx setter not loaded")
  def detail_MatchesInfo_get_inliers_mask(_self), do: :erlang.nif_error("detail_MatchesInfo::inliers_mask getter not loaded")
  def detail_MatchesInfo_set_inliers_mask(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::inliers_mask setter not loaded")
  def detail_MatchesInfo_get_matches(_self), do: :erlang.nif_error("detail_MatchesInfo::matches getter not loaded")
  def detail_MatchesInfo_set_matches(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::matches setter not loaded")
  def detail_MatchesInfo_get_num_inliers(_self), do: :erlang.nif_error("detail_MatchesInfo::num_inliers getter not loaded")
  def detail_MatchesInfo_set_num_inliers(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::num_inliers setter not loaded")
  def detail_MatchesInfo_get_src_img_idx(_self), do: :erlang.nif_error("detail_MatchesInfo::src_img_idx getter not loaded")
  def detail_MatchesInfo_set_src_img_idx(_self, _prop), do: :erlang.nif_error("detail_MatchesInfo::src_img_idx setter not loaded")
  def detail_detail_MultiBandBlender_MultiBandBlender(_opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::detail_MultiBandBlender not loaded")
  def detail_detail_MultiBandBlender_blend(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::blend not loaded")
  def detail_detail_MultiBandBlender_feed(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::feed not loaded")
  def detail_detail_MultiBandBlender_numBands(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::numBands not loaded")
  def detail_detail_MultiBandBlender_prepare(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::prepare not loaded")
  def detail_detail_MultiBandBlender_setNumBands(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::MultiBandBlender::setNumBands not loaded")
  def detail_detail_NoBundleAdjuster_NoBundleAdjuster(_opts \\ []), do: :erlang.nif_error("cv::detail::NoBundleAdjuster::detail_NoBundleAdjuster not loaded")
  def detail_detail_NoExposureCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::NoExposureCompensator::apply not loaded")
  def detail_detail_NoExposureCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::NoExposureCompensator::getMatGains not loaded")
  def detail_detail_NoExposureCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::NoExposureCompensator::setMatGains not loaded")
  def detail_detail_NoSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::NoSeamFinder::find not loaded")
  def detail_detail_PairwiseSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::PairwiseSeamFinder::find not loaded")
  def detail_detail_SeamFinder_createDefault_static(_opts \\ []), do: :erlang.nif_error("cv::detail::SeamFinder::createDefault not loaded")
  def detail_detail_SeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::SeamFinder::find not loaded")
  def detail_detail_SphericalProjector_mapBackward(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::SphericalProjector::mapBackward not loaded")
  def detail_detail_SphericalProjector_mapForward(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::SphericalProjector::mapForward not loaded")
  def detail_detail_Timelapser_createDefault_static(_opts \\ []), do: :erlang.nif_error("cv::detail::Timelapser::createDefault not loaded")
  def detail_detail_Timelapser_getDst(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Timelapser::getDst not loaded")
  def detail_detail_Timelapser_initialize(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Timelapser::initialize not loaded")
  def detail_detail_Timelapser_process(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::Timelapser::process not loaded")
  def detail_detail_VoronoiSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error("cv::detail::VoronoiSeamFinder::find not loaded")
  def dnn_dnn_ClassificationModel_ClassificationModel(_opts \\ []), do: :erlang.nif_error("cv::dnn::ClassificationModel::dnn_ClassificationModel not loaded")
  def dnn_dnn_ClassificationModel_classify(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::ClassificationModel::classify not loaded")
  def dnn_dnn_ClassificationModel_getEnableSoftmaxPostProcessing(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::ClassificationModel::getEnableSoftmaxPostProcessing not loaded")
  def dnn_dnn_ClassificationModel_setEnableSoftmaxPostProcessing(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::ClassificationModel::setEnableSoftmaxPostProcessing not loaded")
  def dnn_dnn_DetectionModel_DetectionModel(_opts \\ []), do: :erlang.nif_error("cv::dnn::DetectionModel::dnn_DetectionModel not loaded")
  def dnn_dnn_DetectionModel_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DetectionModel::detect not loaded")
  def dnn_dnn_DetectionModel_getNmsAcrossClasses(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DetectionModel::getNmsAcrossClasses not loaded")
  def dnn_dnn_DetectionModel_setNmsAcrossClasses(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DetectionModel::setNmsAcrossClasses not loaded")
  def dnn_dnn_DictValue_DictValue(_opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::dnn_DictValue not loaded")
  def dnn_dnn_DictValue_getIntValue(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::getIntValue not loaded")
  def dnn_dnn_DictValue_getRealValue(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::getRealValue not loaded")
  def dnn_dnn_DictValue_getStringValue(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::getStringValue not loaded")
  def dnn_dnn_DictValue_isInt(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::isInt not loaded")
  def dnn_dnn_DictValue_isReal(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::isReal not loaded")
  def dnn_dnn_DictValue_isString(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::DictValue::isString not loaded")
  def dnn_dnn_KeypointsModel_KeypointsModel(_opts \\ []), do: :erlang.nif_error("cv::dnn::KeypointsModel::dnn_KeypointsModel not loaded")
  def dnn_dnn_KeypointsModel_estimate(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::KeypointsModel::estimate not loaded")
  def dnn_dnn_Layer_finalize(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Layer::finalize not loaded")
  def dnn_dnn_Layer_outputNameToIndex(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Layer::outputNameToIndex not loaded")
  def dnn_dnn_Layer_run(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Layer::run not loaded")
  def dnn_Layer_get_blobs(_self), do: :erlang.nif_error("dnn_Layer::blobs getter not loaded")
  def dnn_Layer_set_blobs(_self, _prop), do: :erlang.nif_error("dnn_Layer::blobs setter not loaded")
  def dnn_Layer_get_name(_self), do: :erlang.nif_error("dnn_Layer::name getter not loaded")
  def dnn_Layer_get_preferableTarget(_self), do: :erlang.nif_error("dnn_Layer::preferableTarget getter not loaded")
  def dnn_Layer_get_type(_self), do: :erlang.nif_error("dnn_Layer::type getter not loaded")
  def dnn_dnn_Model_Model(_opts \\ []), do: :erlang.nif_error("cv::dnn::Model::dnn_Model not loaded")
  def dnn_dnn_Model_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::predict not loaded")
  def dnn_dnn_Model_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputCrop not loaded")
  def dnn_dnn_Model_setInputMean(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputMean not loaded")
  def dnn_dnn_Model_setInputParams(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputParams not loaded")
  def dnn_dnn_Model_setInputScale(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputScale not loaded")
  def dnn_dnn_Model_setInputSize(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputSize not loaded")
  def dnn_dnn_Model_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setInputSwapRB not loaded")
  def dnn_dnn_Model_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setPreferableBackend not loaded")
  def dnn_dnn_Model_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Model::setPreferableTarget not loaded")
  def dnn_dnn_Net_Net(_opts \\ []), do: :erlang.nif_error("cv::dnn::Net::dnn_Net not loaded")
  def dnn_dnn_Net_connect(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::connect not loaded")
  def dnn_dnn_Net_dump(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::dump not loaded")
  def dnn_dnn_Net_dumpToFile(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::dumpToFile not loaded")
  def dnn_dnn_Net_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::empty not loaded")
  def dnn_dnn_Net_enableFusion(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::enableFusion not loaded")
  def dnn_dnn_Net_forward(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::forward not loaded")
  def dnn_dnn_Net_forwardAndRetrieve(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::forwardAndRetrieve not loaded")
  def dnn_dnn_Net_forwardAsync(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::forwardAsync not loaded")
  def dnn_dnn_Net_getFLOPS(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getFLOPS not loaded")
  def dnn_dnn_Net_getInputDetails(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getInputDetails not loaded")
  def dnn_dnn_Net_getLayer(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayer not loaded")
  def dnn_dnn_Net_getLayerId(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayerId not loaded")
  def dnn_dnn_Net_getLayerNames(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayerNames not loaded")
  def dnn_dnn_Net_getLayerShapes(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayerShapes not loaded")
  def dnn_dnn_Net_getLayerTypes(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayerTypes not loaded")
  def dnn_dnn_Net_getLayersCount(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayersCount not loaded")
  def dnn_dnn_Net_getLayersShapes(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getLayersShapes not loaded")
  def dnn_dnn_Net_getMemoryConsumption(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getMemoryConsumption not loaded")
  def dnn_dnn_Net_getOutputDetails(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getOutputDetails not loaded")
  def dnn_dnn_Net_getParam(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getParam not loaded")
  def dnn_dnn_Net_getPerfProfile(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getPerfProfile not loaded")
  def dnn_dnn_Net_getUnconnectedOutLayers(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getUnconnectedOutLayers not loaded")
  def dnn_dnn_Net_getUnconnectedOutLayersNames(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::getUnconnectedOutLayersNames not loaded")
  def dnn_dnn_Net_quantize(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::quantize not loaded")
  def dnn_dnn_Net_readFromModelOptimizer_static(_opts \\ []), do: :erlang.nif_error("cv::dnn::Net::readFromModelOptimizer not loaded")
  def dnn_dnn_Net_setHalideScheduler(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setHalideScheduler not loaded")
  def dnn_dnn_Net_setInput(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setInput not loaded")
  def dnn_dnn_Net_setInputShape(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setInputShape not loaded")
  def dnn_dnn_Net_setInputsNames(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setInputsNames not loaded")
  def dnn_dnn_Net_setParam(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setParam not loaded")
  def dnn_dnn_Net_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setPreferableBackend not loaded")
  def dnn_dnn_Net_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::Net::setPreferableTarget not loaded")
  def dnn_dnn_SegmentationModel_SegmentationModel(_opts \\ []), do: :erlang.nif_error("cv::dnn::SegmentationModel::dnn_SegmentationModel not loaded")
  def dnn_dnn_SegmentationModel_segment(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::SegmentationModel::segment not loaded")
  def dnn_dnn_TextDetectionModel_detect(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel::detect not loaded")
  def dnn_dnn_TextDetectionModel_detectTextRectangles(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel::detectTextRectangles not loaded")
  def dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB(_opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::dnn_TextDetectionModel_DB not loaded")
  def dnn_dnn_TextDetectionModel_DB_getBinaryThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::getBinaryThreshold not loaded")
  def dnn_dnn_TextDetectionModel_DB_getMaxCandidates(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::getMaxCandidates not loaded")
  def dnn_dnn_TextDetectionModel_DB_getPolygonThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::getPolygonThreshold not loaded")
  def dnn_dnn_TextDetectionModel_DB_getUnclipRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::getUnclipRatio not loaded")
  def dnn_dnn_TextDetectionModel_DB_setBinaryThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::setBinaryThreshold not loaded")
  def dnn_dnn_TextDetectionModel_DB_setMaxCandidates(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::setMaxCandidates not loaded")
  def dnn_dnn_TextDetectionModel_DB_setPolygonThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::setPolygonThreshold not loaded")
  def dnn_dnn_TextDetectionModel_DB_setUnclipRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_DB::setUnclipRatio not loaded")
  def dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST(_opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_EAST::dnn_TextDetectionModel_EAST not loaded")
  def dnn_dnn_TextDetectionModel_EAST_getConfidenceThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_EAST::getConfidenceThreshold not loaded")
  def dnn_dnn_TextDetectionModel_EAST_getNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_EAST::getNMSThreshold not loaded")
  def dnn_dnn_TextDetectionModel_EAST_setConfidenceThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_EAST::setConfidenceThreshold not loaded")
  def dnn_dnn_TextDetectionModel_EAST_setNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextDetectionModel_EAST::setNMSThreshold not loaded")
  def dnn_dnn_TextRecognitionModel_TextRecognitionModel(_opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::dnn_TextRecognitionModel not loaded")
  def dnn_dnn_TextRecognitionModel_getDecodeType(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::getDecodeType not loaded")
  def dnn_dnn_TextRecognitionModel_getVocabulary(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::getVocabulary not loaded")
  def dnn_dnn_TextRecognitionModel_recognize(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::recognize not loaded")
  def dnn_dnn_TextRecognitionModel_setDecodeOptsCTCPrefixBeamSearch(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::setDecodeOptsCTCPrefixBeamSearch not loaded")
  def dnn_dnn_TextRecognitionModel_setDecodeType(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::setDecodeType not loaded")
  def dnn_dnn_TextRecognitionModel_setVocabulary(_self, _opts \\ []), do: :erlang.nif_error("cv::dnn::TextRecognitionModel::setVocabulary not loaded")
  def flann_flann_Index_Index(_opts \\ []), do: :erlang.nif_error("cv::flann::Index::flann_Index not loaded")
  def flann_flann_Index_build(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::build not loaded")
  def flann_flann_Index_getAlgorithm(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::getAlgorithm not loaded")
  def flann_flann_Index_getDistance(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::getDistance not loaded")
  def flann_flann_Index_knnSearch(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::knnSearch not loaded")
  def flann_flann_Index_load(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::load not loaded")
  def flann_flann_Index_radiusSearch(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::radiusSearch not loaded")
  def flann_flann_Index_release(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::release not loaded")
  def flann_flann_Index_save(_self, _opts \\ []), do: :erlang.nif_error("cv::flann::Index::save not loaded")
  def ml_ml_ANN_MLP_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::calcError not loaded")
  def ml_ANN_MLP_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::clear not loaded")
  def ml_ml_ANN_MLP_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::create not loaded")
  def ml_ml_ANN_MLP_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::empty not loaded")
  def ml_ml_ANN_MLP_getAnnealCoolingRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getAnnealCoolingRatio not loaded")
  def ml_ml_ANN_MLP_getAnnealFinalT(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getAnnealFinalT not loaded")
  def ml_ml_ANN_MLP_getAnnealInitialT(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getAnnealInitialT not loaded")
  def ml_ml_ANN_MLP_getAnnealItePerStep(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getAnnealItePerStep not loaded")
  def ml_ml_ANN_MLP_getBackpropMomentumScale(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getBackpropMomentumScale not loaded")
  def ml_ml_ANN_MLP_getBackpropWeightScale(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getBackpropWeightScale not loaded")
  def ml_ANN_MLP_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getDefaultName not loaded")
  def ml_ml_ANN_MLP_getLayerSizes(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getLayerSizes not loaded")
  def ml_ml_ANN_MLP_getRpropDW0(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getRpropDW0 not loaded")
  def ml_ml_ANN_MLP_getRpropDWMax(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getRpropDWMax not loaded")
  def ml_ml_ANN_MLP_getRpropDWMin(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getRpropDWMin not loaded")
  def ml_ml_ANN_MLP_getRpropDWMinus(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getRpropDWMinus not loaded")
  def ml_ml_ANN_MLP_getRpropDWPlus(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getRpropDWPlus not loaded")
  def ml_ml_ANN_MLP_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getTermCriteria not loaded")
  def ml_ml_ANN_MLP_getTrainMethod(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getTrainMethod not loaded")
  def ml_ml_ANN_MLP_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getVarCount not loaded")
  def ml_ml_ANN_MLP_getWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::getWeights not loaded")
  def ml_ml_ANN_MLP_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::isClassifier not loaded")
  def ml_ml_ANN_MLP_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::isTrained not loaded")
  def ml_ml_ANN_MLP_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::load not loaded")
  def ml_ml_ANN_MLP_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::predict not loaded")
  def ml_ANN_MLP_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::read not loaded")
  def ml_ANN_MLP_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::save not loaded")
  def ml_ml_ANN_MLP_setActivationFunction(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setActivationFunction not loaded")
  def ml_ml_ANN_MLP_setAnnealCoolingRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setAnnealCoolingRatio not loaded")
  def ml_ml_ANN_MLP_setAnnealFinalT(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setAnnealFinalT not loaded")
  def ml_ml_ANN_MLP_setAnnealInitialT(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setAnnealInitialT not loaded")
  def ml_ml_ANN_MLP_setAnnealItePerStep(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setAnnealItePerStep not loaded")
  def ml_ml_ANN_MLP_setBackpropMomentumScale(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setBackpropMomentumScale not loaded")
  def ml_ml_ANN_MLP_setBackpropWeightScale(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setBackpropWeightScale not loaded")
  def ml_ml_ANN_MLP_setLayerSizes(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setLayerSizes not loaded")
  def ml_ml_ANN_MLP_setRpropDW0(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setRpropDW0 not loaded")
  def ml_ml_ANN_MLP_setRpropDWMax(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setRpropDWMax not loaded")
  def ml_ml_ANN_MLP_setRpropDWMin(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setRpropDWMin not loaded")
  def ml_ml_ANN_MLP_setRpropDWMinus(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setRpropDWMinus not loaded")
  def ml_ml_ANN_MLP_setRpropDWPlus(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setRpropDWPlus not loaded")
  def ml_ml_ANN_MLP_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setTermCriteria not loaded")
  def ml_ml_ANN_MLP_setTrainMethod(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::setTrainMethod not loaded")
  def ml_ml_ANN_MLP_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::train not loaded")
  def ml_ANN_MLP_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::ANN_MLP::write not loaded")
  def ml_ml_Boost_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::calcError not loaded")
  def ml_Boost_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::clear not loaded")
  def ml_ml_Boost_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::Boost::create not loaded")
  def ml_ml_Boost_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::empty not loaded")
  def ml_ml_Boost_getBoostType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getBoostType not loaded")
  def ml_ml_Boost_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getCVFolds not loaded")
  def ml_Boost_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getDefaultName not loaded")
  def ml_ml_Boost_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getMaxCategories not loaded")
  def ml_ml_Boost_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getMaxDepth not loaded")
  def ml_ml_Boost_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getMinSampleCount not loaded")
  def ml_ml_Boost_getPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getPriors not loaded")
  def ml_ml_Boost_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getRegressionAccuracy not loaded")
  def ml_ml_Boost_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getTruncatePrunedTree not loaded")
  def ml_ml_Boost_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getUse1SERule not loaded")
  def ml_ml_Boost_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getUseSurrogates not loaded")
  def ml_ml_Boost_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getVarCount not loaded")
  def ml_ml_Boost_getWeakCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getWeakCount not loaded")
  def ml_ml_Boost_getWeightTrimRate(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::getWeightTrimRate not loaded")
  def ml_ml_Boost_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::isClassifier not loaded")
  def ml_ml_Boost_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::isTrained not loaded")
  def ml_ml_Boost_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::Boost::load not loaded")
  def ml_ml_Boost_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::predict not loaded")
  def ml_Boost_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::read not loaded")
  def ml_Boost_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::save not loaded")
  def ml_ml_Boost_setBoostType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setBoostType not loaded")
  def ml_ml_Boost_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setCVFolds not loaded")
  def ml_ml_Boost_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setMaxCategories not loaded")
  def ml_ml_Boost_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setMaxDepth not loaded")
  def ml_ml_Boost_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setMinSampleCount not loaded")
  def ml_ml_Boost_setPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setPriors not loaded")
  def ml_ml_Boost_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setRegressionAccuracy not loaded")
  def ml_ml_Boost_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setTruncatePrunedTree not loaded")
  def ml_ml_Boost_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setUse1SERule not loaded")
  def ml_ml_Boost_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setUseSurrogates not loaded")
  def ml_ml_Boost_setWeakCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setWeakCount not loaded")
  def ml_ml_Boost_setWeightTrimRate(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::setWeightTrimRate not loaded")
  def ml_ml_Boost_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::train not loaded")
  def ml_Boost_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::Boost::write not loaded")
  def ml_ml_DTrees_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::calcError not loaded")
  def ml_DTrees_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::clear not loaded")
  def ml_ml_DTrees_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::create not loaded")
  def ml_ml_DTrees_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::empty not loaded")
  def ml_ml_DTrees_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getCVFolds not loaded")
  def ml_DTrees_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getDefaultName not loaded")
  def ml_ml_DTrees_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getMaxCategories not loaded")
  def ml_ml_DTrees_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getMaxDepth not loaded")
  def ml_ml_DTrees_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getMinSampleCount not loaded")
  def ml_ml_DTrees_getPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getPriors not loaded")
  def ml_ml_DTrees_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getRegressionAccuracy not loaded")
  def ml_ml_DTrees_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getTruncatePrunedTree not loaded")
  def ml_ml_DTrees_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getUse1SERule not loaded")
  def ml_ml_DTrees_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getUseSurrogates not loaded")
  def ml_ml_DTrees_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::getVarCount not loaded")
  def ml_ml_DTrees_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::isClassifier not loaded")
  def ml_ml_DTrees_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::isTrained not loaded")
  def ml_ml_DTrees_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::load not loaded")
  def ml_ml_DTrees_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::predict not loaded")
  def ml_DTrees_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::read not loaded")
  def ml_DTrees_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::save not loaded")
  def ml_ml_DTrees_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setCVFolds not loaded")
  def ml_ml_DTrees_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setMaxCategories not loaded")
  def ml_ml_DTrees_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setMaxDepth not loaded")
  def ml_ml_DTrees_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setMinSampleCount not loaded")
  def ml_ml_DTrees_setPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setPriors not loaded")
  def ml_ml_DTrees_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setRegressionAccuracy not loaded")
  def ml_ml_DTrees_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setTruncatePrunedTree not loaded")
  def ml_ml_DTrees_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setUse1SERule not loaded")
  def ml_ml_DTrees_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::setUseSurrogates not loaded")
  def ml_ml_DTrees_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::train not loaded")
  def ml_DTrees_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::DTrees::write not loaded")
  def ml_ml_EM_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::calcError not loaded")
  def ml_EM_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::clear not loaded")
  def ml_ml_EM_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::EM::create not loaded")
  def ml_ml_EM_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::empty not loaded")
  def ml_ml_EM_getClustersNumber(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getClustersNumber not loaded")
  def ml_ml_EM_getCovarianceMatrixType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getCovarianceMatrixType not loaded")
  def ml_ml_EM_getCovs(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getCovs not loaded")
  def ml_EM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getDefaultName not loaded")
  def ml_ml_EM_getMeans(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getMeans not loaded")
  def ml_ml_EM_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getTermCriteria not loaded")
  def ml_ml_EM_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getVarCount not loaded")
  def ml_ml_EM_getWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::getWeights not loaded")
  def ml_ml_EM_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::isClassifier not loaded")
  def ml_ml_EM_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::isTrained not loaded")
  def ml_ml_EM_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::EM::load not loaded")
  def ml_ml_EM_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::predict not loaded")
  def ml_ml_EM_predict2(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::predict2 not loaded")
  def ml_EM_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::read not loaded")
  def ml_EM_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::save not loaded")
  def ml_ml_EM_setClustersNumber(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::setClustersNumber not loaded")
  def ml_ml_EM_setCovarianceMatrixType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::setCovarianceMatrixType not loaded")
  def ml_ml_EM_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::setTermCriteria not loaded")
  def ml_ml_EM_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::train not loaded")
  def ml_ml_EM_trainE(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::trainE not loaded")
  def ml_ml_EM_trainEM(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::trainEM not loaded")
  def ml_ml_EM_trainM(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::trainM not loaded")
  def ml_EM_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::EM::write not loaded")
  def ml_ml_KNearest_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::calcError not loaded")
  def ml_KNearest_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::clear not loaded")
  def ml_ml_KNearest_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::create not loaded")
  def ml_ml_KNearest_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::empty not loaded")
  def ml_ml_KNearest_findNearest(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::findNearest not loaded")
  def ml_ml_KNearest_getAlgorithmType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getAlgorithmType not loaded")
  def ml_ml_KNearest_getDefaultK(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getDefaultK not loaded")
  def ml_KNearest_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getDefaultName not loaded")
  def ml_ml_KNearest_getEmax(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getEmax not loaded")
  def ml_ml_KNearest_getIsClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getIsClassifier not loaded")
  def ml_ml_KNearest_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::getVarCount not loaded")
  def ml_ml_KNearest_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::isClassifier not loaded")
  def ml_ml_KNearest_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::isTrained not loaded")
  def ml_ml_KNearest_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::load not loaded")
  def ml_ml_KNearest_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::predict not loaded")
  def ml_KNearest_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::read not loaded")
  def ml_KNearest_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::save not loaded")
  def ml_ml_KNearest_setAlgorithmType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::setAlgorithmType not loaded")
  def ml_ml_KNearest_setDefaultK(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::setDefaultK not loaded")
  def ml_ml_KNearest_setEmax(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::setEmax not loaded")
  def ml_ml_KNearest_setIsClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::setIsClassifier not loaded")
  def ml_ml_KNearest_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::train not loaded")
  def ml_KNearest_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::KNearest::write not loaded")
  def ml_ml_LogisticRegression_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::calcError not loaded")
  def ml_LogisticRegression_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::clear not loaded")
  def ml_ml_LogisticRegression_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::create not loaded")
  def ml_ml_LogisticRegression_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::empty not loaded")
  def ml_LogisticRegression_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getDefaultName not loaded")
  def ml_ml_LogisticRegression_getIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getIterations not loaded")
  def ml_ml_LogisticRegression_getLearningRate(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getLearningRate not loaded")
  def ml_ml_LogisticRegression_getMiniBatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getMiniBatchSize not loaded")
  def ml_ml_LogisticRegression_getRegularization(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getRegularization not loaded")
  def ml_ml_LogisticRegression_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getTermCriteria not loaded")
  def ml_ml_LogisticRegression_getTrainMethod(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getTrainMethod not loaded")
  def ml_ml_LogisticRegression_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::getVarCount not loaded")
  def ml_ml_LogisticRegression_get_learnt_thetas(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::get_learnt_thetas not loaded")
  def ml_ml_LogisticRegression_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::isClassifier not loaded")
  def ml_ml_LogisticRegression_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::isTrained not loaded")
  def ml_ml_LogisticRegression_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::load not loaded")
  def ml_ml_LogisticRegression_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::predict not loaded")
  def ml_LogisticRegression_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::read not loaded")
  def ml_LogisticRegression_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::save not loaded")
  def ml_ml_LogisticRegression_setIterations(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setIterations not loaded")
  def ml_ml_LogisticRegression_setLearningRate(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setLearningRate not loaded")
  def ml_ml_LogisticRegression_setMiniBatchSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setMiniBatchSize not loaded")
  def ml_ml_LogisticRegression_setRegularization(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setRegularization not loaded")
  def ml_ml_LogisticRegression_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setTermCriteria not loaded")
  def ml_ml_LogisticRegression_setTrainMethod(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::setTrainMethod not loaded")
  def ml_ml_LogisticRegression_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::train not loaded")
  def ml_LogisticRegression_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::LogisticRegression::write not loaded")
  def ml_ml_NormalBayesClassifier_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::calcError not loaded")
  def ml_NormalBayesClassifier_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::clear not loaded")
  def ml_ml_NormalBayesClassifier_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::create not loaded")
  def ml_ml_NormalBayesClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::empty not loaded")
  def ml_NormalBayesClassifier_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::getDefaultName not loaded")
  def ml_ml_NormalBayesClassifier_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::getVarCount not loaded")
  def ml_ml_NormalBayesClassifier_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::isClassifier not loaded")
  def ml_ml_NormalBayesClassifier_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::isTrained not loaded")
  def ml_ml_NormalBayesClassifier_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::load not loaded")
  def ml_ml_NormalBayesClassifier_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::predict not loaded")
  def ml_ml_NormalBayesClassifier_predictProb(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::predictProb not loaded")
  def ml_NormalBayesClassifier_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::read not loaded")
  def ml_NormalBayesClassifier_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::save not loaded")
  def ml_ml_NormalBayesClassifier_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::train not loaded")
  def ml_NormalBayesClassifier_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::NormalBayesClassifier::write not loaded")
  def ml_ml_ParamGrid_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::ParamGrid::create not loaded")
  def ml_ParamGrid_get_logStep(_self), do: :erlang.nif_error("ml_ParamGrid::logStep getter not loaded")
  def ml_ParamGrid_set_logStep(_self, _prop), do: :erlang.nif_error("ml_ParamGrid::logStep setter not loaded")
  def ml_ParamGrid_get_maxVal(_self), do: :erlang.nif_error("ml_ParamGrid::maxVal getter not loaded")
  def ml_ParamGrid_set_maxVal(_self, _prop), do: :erlang.nif_error("ml_ParamGrid::maxVal setter not loaded")
  def ml_ParamGrid_get_minVal(_self), do: :erlang.nif_error("ml_ParamGrid::minVal getter not loaded")
  def ml_ParamGrid_set_minVal(_self, _prop), do: :erlang.nif_error("ml_ParamGrid::minVal setter not loaded")
  def ml_ml_RTrees_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::calcError not loaded")
  def ml_RTrees_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::clear not loaded")
  def ml_ml_RTrees_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::create not loaded")
  def ml_ml_RTrees_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::empty not loaded")
  def ml_ml_RTrees_getActiveVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getActiveVarCount not loaded")
  def ml_ml_RTrees_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getCVFolds not loaded")
  def ml_ml_RTrees_getCalculateVarImportance(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getCalculateVarImportance not loaded")
  def ml_RTrees_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getDefaultName not loaded")
  def ml_ml_RTrees_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getMaxCategories not loaded")
  def ml_ml_RTrees_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getMaxDepth not loaded")
  def ml_ml_RTrees_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getMinSampleCount not loaded")
  def ml_ml_RTrees_getOOBError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getOOBError not loaded")
  def ml_ml_RTrees_getPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getPriors not loaded")
  def ml_ml_RTrees_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getRegressionAccuracy not loaded")
  def ml_ml_RTrees_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getTermCriteria not loaded")
  def ml_ml_RTrees_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getTruncatePrunedTree not loaded")
  def ml_ml_RTrees_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getUse1SERule not loaded")
  def ml_ml_RTrees_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getUseSurrogates not loaded")
  def ml_ml_RTrees_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getVarCount not loaded")
  def ml_ml_RTrees_getVarImportance(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getVarImportance not loaded")
  def ml_ml_RTrees_getVotes(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::getVotes not loaded")
  def ml_ml_RTrees_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::isClassifier not loaded")
  def ml_ml_RTrees_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::isTrained not loaded")
  def ml_ml_RTrees_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::load not loaded")
  def ml_ml_RTrees_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::predict not loaded")
  def ml_RTrees_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::read not loaded")
  def ml_RTrees_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::save not loaded")
  def ml_ml_RTrees_setActiveVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setActiveVarCount not loaded")
  def ml_ml_RTrees_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setCVFolds not loaded")
  def ml_ml_RTrees_setCalculateVarImportance(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setCalculateVarImportance not loaded")
  def ml_ml_RTrees_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setMaxCategories not loaded")
  def ml_ml_RTrees_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setMaxDepth not loaded")
  def ml_ml_RTrees_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setMinSampleCount not loaded")
  def ml_ml_RTrees_setPriors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setPriors not loaded")
  def ml_ml_RTrees_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setRegressionAccuracy not loaded")
  def ml_ml_RTrees_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setTermCriteria not loaded")
  def ml_ml_RTrees_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setTruncatePrunedTree not loaded")
  def ml_ml_RTrees_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setUse1SERule not loaded")
  def ml_ml_RTrees_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::setUseSurrogates not loaded")
  def ml_ml_RTrees_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::train not loaded")
  def ml_RTrees_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::RTrees::write not loaded")
  def ml_ml_SVM_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::calcError not loaded")
  def ml_SVM_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::clear not loaded")
  def ml_ml_SVM_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::SVM::create not loaded")
  def ml_ml_SVM_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::empty not loaded")
  def ml_ml_SVM_getC(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getC not loaded")
  def ml_ml_SVM_getClassWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getClassWeights not loaded")
  def ml_ml_SVM_getCoef0(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getCoef0 not loaded")
  def ml_ml_SVM_getDecisionFunction(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getDecisionFunction not loaded")
  def ml_ml_SVM_getDefaultGridPtr_static(_opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getDefaultGridPtr not loaded")
  def ml_SVM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getDefaultName not loaded")
  def ml_ml_SVM_getDegree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getDegree not loaded")
  def ml_ml_SVM_getGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getGamma not loaded")
  def ml_ml_SVM_getKernelType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getKernelType not loaded")
  def ml_ml_SVM_getNu(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getNu not loaded")
  def ml_ml_SVM_getP(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getP not loaded")
  def ml_ml_SVM_getSupportVectors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getSupportVectors not loaded")
  def ml_ml_SVM_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getTermCriteria not loaded")
  def ml_ml_SVM_getType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getType not loaded")
  def ml_ml_SVM_getUncompressedSupportVectors(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getUncompressedSupportVectors not loaded")
  def ml_ml_SVM_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::getVarCount not loaded")
  def ml_ml_SVM_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::isClassifier not loaded")
  def ml_ml_SVM_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::isTrained not loaded")
  def ml_ml_SVM_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::SVM::load not loaded")
  def ml_ml_SVM_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::predict not loaded")
  def ml_SVM_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::read not loaded")
  def ml_SVM_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::save not loaded")
  def ml_ml_SVM_setC(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setC not loaded")
  def ml_ml_SVM_setClassWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setClassWeights not loaded")
  def ml_ml_SVM_setCoef0(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setCoef0 not loaded")
  def ml_ml_SVM_setDegree(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setDegree not loaded")
  def ml_ml_SVM_setGamma(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setGamma not loaded")
  def ml_ml_SVM_setKernel(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setKernel not loaded")
  def ml_ml_SVM_setNu(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setNu not loaded")
  def ml_ml_SVM_setP(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setP not loaded")
  def ml_ml_SVM_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setTermCriteria not loaded")
  def ml_ml_SVM_setType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::setType not loaded")
  def ml_ml_SVM_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::train not loaded")
  def ml_ml_SVM_trainAuto(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::trainAuto not loaded")
  def ml_SVM_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVM::write not loaded")
  def ml_ml_SVMSGD_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::calcError not loaded")
  def ml_SVMSGD_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::clear not loaded")
  def ml_ml_SVMSGD_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::create not loaded")
  def ml_ml_SVMSGD_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::empty not loaded")
  def ml_SVMSGD_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getDefaultName not loaded")
  def ml_ml_SVMSGD_getInitialStepSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getInitialStepSize not loaded")
  def ml_ml_SVMSGD_getMarginRegularization(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getMarginRegularization not loaded")
  def ml_ml_SVMSGD_getMarginType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getMarginType not loaded")
  def ml_ml_SVMSGD_getShift(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getShift not loaded")
  def ml_ml_SVMSGD_getStepDecreasingPower(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getStepDecreasingPower not loaded")
  def ml_ml_SVMSGD_getSvmsgdType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getSvmsgdType not loaded")
  def ml_ml_SVMSGD_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getTermCriteria not loaded")
  def ml_ml_SVMSGD_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getVarCount not loaded")
  def ml_ml_SVMSGD_getWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::getWeights not loaded")
  def ml_ml_SVMSGD_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::isClassifier not loaded")
  def ml_ml_SVMSGD_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::isTrained not loaded")
  def ml_ml_SVMSGD_load_static(_opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::load not loaded")
  def ml_ml_SVMSGD_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::predict not loaded")
  def ml_SVMSGD_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::read not loaded")
  def ml_SVMSGD_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::save not loaded")
  def ml_ml_SVMSGD_setInitialStepSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setInitialStepSize not loaded")
  def ml_ml_SVMSGD_setMarginRegularization(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setMarginRegularization not loaded")
  def ml_ml_SVMSGD_setMarginType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setMarginType not loaded")
  def ml_ml_SVMSGD_setOptimalParameters(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setOptimalParameters not loaded")
  def ml_ml_SVMSGD_setStepDecreasingPower(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setStepDecreasingPower not loaded")
  def ml_ml_SVMSGD_setSvmsgdType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setSvmsgdType not loaded")
  def ml_ml_SVMSGD_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::setTermCriteria not loaded")
  def ml_ml_SVMSGD_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::train not loaded")
  def ml_SVMSGD_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::SVMSGD::write not loaded")
  def ml_ml_StatModel_calcError(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::calcError not loaded")
  def ml_StatModel_clear(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::clear not loaded")
  def ml_ml_StatModel_empty(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::empty not loaded")
  def ml_StatModel_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::getDefaultName not loaded")
  def ml_ml_StatModel_getVarCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::getVarCount not loaded")
  def ml_ml_StatModel_isClassifier(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::isClassifier not loaded")
  def ml_ml_StatModel_isTrained(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::isTrained not loaded")
  def ml_ml_StatModel_predict(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::predict not loaded")
  def ml_StatModel_read(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::read not loaded")
  def ml_StatModel_save(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::save not loaded")
  def ml_ml_StatModel_train(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::train not loaded")
  def ml_StatModel_write(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::StatModel::write not loaded")
  def ml_ml_TrainData_create_static(_opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::create not loaded")
  def ml_ml_TrainData_getCatCount(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getCatCount not loaded")
  def ml_ml_TrainData_getCatMap(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getCatMap not loaded")
  def ml_ml_TrainData_getCatOfs(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getCatOfs not loaded")
  def ml_ml_TrainData_getClassLabels(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getClassLabels not loaded")
  def ml_ml_TrainData_getDefaultSubstValues(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getDefaultSubstValues not loaded")
  def ml_ml_TrainData_getLayout(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getLayout not loaded")
  def ml_ml_TrainData_getMissing(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getMissing not loaded")
  def ml_ml_TrainData_getNAllVars(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNAllVars not loaded")
  def ml_ml_TrainData_getNSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNSamples not loaded")
  def ml_ml_TrainData_getNTestSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNTestSamples not loaded")
  def ml_ml_TrainData_getNTrainSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNTrainSamples not loaded")
  def ml_ml_TrainData_getNVars(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNVars not loaded")
  def ml_ml_TrainData_getNames(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNames not loaded")
  def ml_ml_TrainData_getNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getNormCatResponses not loaded")
  def ml_ml_TrainData_getResponseType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getResponseType not loaded")
  def ml_ml_TrainData_getResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getResponses not loaded")
  def ml_ml_TrainData_getSample(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getSample not loaded")
  def ml_ml_TrainData_getSampleWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getSampleWeights not loaded")
  def ml_ml_TrainData_getSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getSamples not loaded")
  def ml_ml_TrainData_getSubMatrix_static(_opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getSubMatrix not loaded")
  def ml_ml_TrainData_getSubVector_static(_opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getSubVector not loaded")
  def ml_ml_TrainData_getTestNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTestNormCatResponses not loaded")
  def ml_ml_TrainData_getTestResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTestResponses not loaded")
  def ml_ml_TrainData_getTestSampleIdx(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTestSampleIdx not loaded")
  def ml_ml_TrainData_getTestSampleWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTestSampleWeights not loaded")
  def ml_ml_TrainData_getTestSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTestSamples not loaded")
  def ml_ml_TrainData_getTrainNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTrainNormCatResponses not loaded")
  def ml_ml_TrainData_getTrainResponses(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTrainResponses not loaded")
  def ml_ml_TrainData_getTrainSampleIdx(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTrainSampleIdx not loaded")
  def ml_ml_TrainData_getTrainSampleWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTrainSampleWeights not loaded")
  def ml_ml_TrainData_getTrainSamples(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getTrainSamples not loaded")
  def ml_ml_TrainData_getValues(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getValues not loaded")
  def ml_ml_TrainData_getVarIdx(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getVarIdx not loaded")
  def ml_ml_TrainData_getVarSymbolFlags(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getVarSymbolFlags not loaded")
  def ml_ml_TrainData_getVarType(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::getVarType not loaded")
  def ml_ml_TrainData_setTrainTestSplit(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::setTrainTestSplit not loaded")
  def ml_ml_TrainData_setTrainTestSplitRatio(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::setTrainTestSplitRatio not loaded")
  def ml_ml_TrainData_shuffleTrainTest(_self, _opts \\ []), do: :erlang.nif_error("cv::ml::TrainData::shuffleTrainTest not loaded")
  def ocl_ocl_Device_Device(_opts \\ []), do: :erlang.nif_error("cv::ocl::Device::ocl_Device not loaded")
  def ocl_ocl_Device_OpenCLVersion(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::OpenCLVersion not loaded")
  def ocl_ocl_Device_OpenCL_C_Version(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::OpenCL_C_Version not loaded")
  def ocl_ocl_Device_addressBits(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::addressBits not loaded")
  def ocl_ocl_Device_available(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::available not loaded")
  def ocl_ocl_Device_compilerAvailable(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::compilerAvailable not loaded")
  def ocl_ocl_Device_deviceVersionMajor(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::deviceVersionMajor not loaded")
  def ocl_ocl_Device_deviceVersionMinor(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::deviceVersionMinor not loaded")
  def ocl_ocl_Device_doubleFPConfig(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::doubleFPConfig not loaded")
  def ocl_ocl_Device_driverVersion(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::driverVersion not loaded")
  def ocl_ocl_Device_endianLittle(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::endianLittle not loaded")
  def ocl_ocl_Device_errorCorrectionSupport(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::errorCorrectionSupport not loaded")
  def ocl_ocl_Device_executionCapabilities(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::executionCapabilities not loaded")
  def ocl_ocl_Device_extensions(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::extensions not loaded")
  def ocl_ocl_Device_getDefault_static(_opts \\ []), do: :erlang.nif_error("cv::ocl::Device::getDefault not loaded")
  def ocl_ocl_Device_globalMemCacheLineSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::globalMemCacheLineSize not loaded")
  def ocl_ocl_Device_globalMemCacheSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::globalMemCacheSize not loaded")
  def ocl_ocl_Device_globalMemCacheType(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::globalMemCacheType not loaded")
  def ocl_ocl_Device_globalMemSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::globalMemSize not loaded")
  def ocl_ocl_Device_halfFPConfig(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::halfFPConfig not loaded")
  def ocl_ocl_Device_hostUnifiedMemory(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::hostUnifiedMemory not loaded")
  def ocl_ocl_Device_image2DMaxHeight(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::image2DMaxHeight not loaded")
  def ocl_ocl_Device_image2DMaxWidth(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::image2DMaxWidth not loaded")
  def ocl_ocl_Device_image3DMaxDepth(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::image3DMaxDepth not loaded")
  def ocl_ocl_Device_image3DMaxHeight(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::image3DMaxHeight not loaded")
  def ocl_ocl_Device_image3DMaxWidth(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::image3DMaxWidth not loaded")
  def ocl_ocl_Device_imageFromBufferSupport(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::imageFromBufferSupport not loaded")
  def ocl_ocl_Device_imageMaxArraySize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::imageMaxArraySize not loaded")
  def ocl_ocl_Device_imageMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::imageMaxBufferSize not loaded")
  def ocl_ocl_Device_imageSupport(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::imageSupport not loaded")
  def ocl_ocl_Device_intelSubgroupsSupport(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::intelSubgroupsSupport not loaded")
  def ocl_ocl_Device_isAMD(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::isAMD not loaded")
  def ocl_ocl_Device_isExtensionSupported(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::isExtensionSupported not loaded")
  def ocl_ocl_Device_isIntel(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::isIntel not loaded")
  def ocl_ocl_Device_isNVidia(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::isNVidia not loaded")
  def ocl_ocl_Device_linkerAvailable(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::linkerAvailable not loaded")
  def ocl_ocl_Device_localMemSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::localMemSize not loaded")
  def ocl_ocl_Device_localMemType(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::localMemType not loaded")
  def ocl_ocl_Device_maxClockFrequency(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxClockFrequency not loaded")
  def ocl_ocl_Device_maxComputeUnits(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxComputeUnits not loaded")
  def ocl_ocl_Device_maxConstantArgs(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxConstantArgs not loaded")
  def ocl_ocl_Device_maxConstantBufferSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxConstantBufferSize not loaded")
  def ocl_ocl_Device_maxMemAllocSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxMemAllocSize not loaded")
  def ocl_ocl_Device_maxParameterSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxParameterSize not loaded")
  def ocl_ocl_Device_maxReadImageArgs(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxReadImageArgs not loaded")
  def ocl_ocl_Device_maxSamplers(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxSamplers not loaded")
  def ocl_ocl_Device_maxWorkGroupSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxWorkGroupSize not loaded")
  def ocl_ocl_Device_maxWorkItemDims(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxWorkItemDims not loaded")
  def ocl_ocl_Device_maxWriteImageArgs(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::maxWriteImageArgs not loaded")
  def ocl_ocl_Device_memBaseAddrAlign(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::memBaseAddrAlign not loaded")
  def ocl_ocl_Device_name(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::name not loaded")
  def ocl_ocl_Device_nativeVectorWidthChar(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthChar not loaded")
  def ocl_ocl_Device_nativeVectorWidthDouble(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthDouble not loaded")
  def ocl_ocl_Device_nativeVectorWidthFloat(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthFloat not loaded")
  def ocl_ocl_Device_nativeVectorWidthHalf(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthHalf not loaded")
  def ocl_ocl_Device_nativeVectorWidthInt(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthInt not loaded")
  def ocl_ocl_Device_nativeVectorWidthLong(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthLong not loaded")
  def ocl_ocl_Device_nativeVectorWidthShort(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::nativeVectorWidthShort not loaded")
  def ocl_ocl_Device_preferredVectorWidthChar(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthChar not loaded")
  def ocl_ocl_Device_preferredVectorWidthDouble(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthDouble not loaded")
  def ocl_ocl_Device_preferredVectorWidthFloat(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthFloat not loaded")
  def ocl_ocl_Device_preferredVectorWidthHalf(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthHalf not loaded")
  def ocl_ocl_Device_preferredVectorWidthInt(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthInt not loaded")
  def ocl_ocl_Device_preferredVectorWidthLong(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthLong not loaded")
  def ocl_ocl_Device_preferredVectorWidthShort(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::preferredVectorWidthShort not loaded")
  def ocl_ocl_Device_printfBufferSize(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::printfBufferSize not loaded")
  def ocl_ocl_Device_profilingTimerResolution(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::profilingTimerResolution not loaded")
  def ocl_ocl_Device_singleFPConfig(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::singleFPConfig not loaded")
  def ocl_ocl_Device_type(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::type not loaded")
  def ocl_ocl_Device_vendorID(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::vendorID not loaded")
  def ocl_ocl_Device_vendorName(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::vendorName not loaded")
  def ocl_ocl_Device_version(_self, _opts \\ []), do: :erlang.nif_error("cv::ocl::Device::version not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB(_opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::segmentation_IntelligentScissorsMB not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_applyImage(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::applyImage not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_applyImageFeatures(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::applyImageFeatures not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_buildMap(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::buildMap not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_getContour(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::getContour not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_setEdgeFeatureCannyParameters(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::setEdgeFeatureCannyParameters not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_setEdgeFeatureZeroCrossingParameters(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::setEdgeFeatureZeroCrossingParameters not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_setGradientMagnitudeMaxLimit(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::setGradientMagnitudeMaxLimit not loaded")
  def segmentation_segmentation_IntelligentScissorsMB_setWeights(_self, _opts \\ []), do: :erlang.nif_error("cv::segmentation::IntelligentScissorsMB::setWeights not loaded")
  def utils_nested_utils_nested_OriginalClassName_create_static(_opts \\ []), do: :erlang.nif_error("cv::utils::nested::OriginalClassName::create not loaded")
  def utils_nested_utils_nested_OriginalClassName_getFloatParam(_self, _opts \\ []), do: :erlang.nif_error("cv::utils::nested::OriginalClassName::getFloatParam not loaded")
  def utils_nested_utils_nested_OriginalClassName_getIntParam(_self, _opts \\ []), do: :erlang.nif_error("cv::utils::nested::OriginalClassName::getIntParam not loaded")
  def utils_nested_utils_nested_OriginalClassName_originalName_static(_opts \\ []), do: :erlang.nif_error("cv::utils::nested::OriginalClassName::originalName not loaded")
  def utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params(_opts \\ []), do: :erlang.nif_error("cv::utils::nested::OriginalClassName::Params::utils_nested_OriginalClassName_Params not loaded")
  def utils_nested_OriginalClassName_Params_get_float_value(_self), do: :erlang.nif_error("utils_nested_OriginalClassName_Params::float_value getter not loaded")
  def utils_nested_OriginalClassName_Params_set_float_value(_self, _prop), do: :erlang.nif_error("utils_nested_OriginalClassName_Params::float_value setter not loaded")
  def utils_nested_OriginalClassName_Params_get_int_value(_self), do: :erlang.nif_error("utils_nested_OriginalClassName_Params::int_value getter not loaded")
  def utils_nested_OriginalClassName_Params_set_int_value(_self, _prop), do: :erlang.nif_error("utils_nested_OriginalClassName_Params::int_value setter not loaded")
  def ipp_getIppVersion(_opts \\ []), do: :erlang.nif_error("ipp::getIppVersion not loaded")
  def ipp_setUseIPP(_opts \\ []), do: :erlang.nif_error("ipp::setUseIPP not loaded")
  def ipp_setUseIPP_NotExact(_opts \\ []), do: :erlang.nif_error("ipp::setUseIPP_NotExact not loaded")
  def ipp_useIPP(_opts \\ []), do: :erlang.nif_error("ipp::useIPP not loaded")
  def ipp_useIPP_NotExact(_opts \\ []), do: :erlang.nif_error("ipp::useIPP_NotExact not loaded")
  def utils_dumpBool(_opts \\ []), do: :erlang.nif_error("utils::dumpBool not loaded")
  def utils_dumpCString(_opts \\ []), do: :erlang.nif_error("utils::dumpCString not loaded")
  def utils_dumpDouble(_opts \\ []), do: :erlang.nif_error("utils::dumpDouble not loaded")
  def utils_dumpFloat(_opts \\ []), do: :erlang.nif_error("utils::dumpFloat not loaded")
  def utils_dumpInputArray(_opts \\ []), do: :erlang.nif_error("utils::dumpInputArray not loaded")
  def utils_dumpInputArrayOfArrays(_opts \\ []), do: :erlang.nif_error("utils::dumpInputArrayOfArrays not loaded")
  def utils_dumpInputOutputArray(_opts \\ []), do: :erlang.nif_error("utils::dumpInputOutputArray not loaded")
  def utils_dumpInputOutputArrayOfArrays(_opts \\ []), do: :erlang.nif_error("utils::dumpInputOutputArrayOfArrays not loaded")
  def utils_dumpInt(_opts \\ []), do: :erlang.nif_error("utils::dumpInt not loaded")
  def utils_dumpRange(_opts \\ []), do: :erlang.nif_error("utils::dumpRange not loaded")
  def utils_dumpRect(_opts \\ []), do: :erlang.nif_error("utils::dumpRect not loaded")
  def utils_dumpRotatedRect(_opts \\ []), do: :erlang.nif_error("utils::dumpRotatedRect not loaded")
  def utils_dumpSizeT(_opts \\ []), do: :erlang.nif_error("utils::dumpSizeT not loaded")
  def utils_dumpString(_opts \\ []), do: :erlang.nif_error("utils::dumpString not loaded")
  def utils_dumpTermCriteria(_opts \\ []), do: :erlang.nif_error("utils::dumpTermCriteria not loaded")
  def utils_dumpVectorOfDouble(_opts \\ []), do: :erlang.nif_error("utils::dumpVectorOfDouble not loaded")
  def utils_dumpVectorOfInt(_opts \\ []), do: :erlang.nif_error("utils::dumpVectorOfInt not loaded")
  def utils_dumpVectorOfRect(_opts \\ []), do: :erlang.nif_error("utils::dumpVectorOfRect not loaded")
  def utils_generateVectorOfInt(_opts \\ []), do: :erlang.nif_error("utils::generateVectorOfInt not loaded")
  def utils_generateVectorOfMat(_opts \\ []), do: :erlang.nif_error("utils::generateVectorOfMat not loaded")
  def utils_generateVectorOfRect(_opts \\ []), do: :erlang.nif_error("utils::generateVectorOfRect not loaded")
  def utils_testAsyncArray(_opts \\ []), do: :erlang.nif_error("utils::testAsyncArray not loaded")
  def utils_testAsyncException(_opts \\ []), do: :erlang.nif_error("utils::testAsyncException not loaded")
  def utils_testOverloadResolution(_opts \\ []), do: :erlang.nif_error("utils::testOverloadResolution not loaded")
  def utils_testOverwriteNativeMethod(_opts \\ []), do: :erlang.nif_error("utils::testOverwriteNativeMethod not loaded")
  def utils_testRaiseGeneralException(_opts \\ []), do: :erlang.nif_error("utils::testRaiseGeneralException not loaded")
  def utils_testReservedKeywordConversion(_opts \\ []), do: :erlang.nif_error("utils::testReservedKeywordConversion not loaded")
  def utils_testRotatedRect(_opts \\ []), do: :erlang.nif_error("utils::testRotatedRect not loaded")
  def utils_testRotatedRectVector(_opts \\ []), do: :erlang.nif_error("utils::testRotatedRectVector not loaded")
  def utils_nested_ExportClassName_create(_opts \\ []), do: :erlang.nif_error("utils_nested::ExportClassName_create not loaded")
  def utils_nested_ExportClassName_originalName(_opts \\ []), do: :erlang.nif_error("utils_nested::ExportClassName_originalName not loaded")
  def utils_nested_OriginalClassName_create(_opts \\ []), do: :erlang.nif_error("utils_nested::OriginalClassName_create not loaded")
  def utils_nested_OriginalClassName_originalName(_opts \\ []), do: :erlang.nif_error("utils_nested::OriginalClassName_originalName not loaded")
  def utils_nested_testEchoBooleanFunction(_opts \\ []), do: :erlang.nif_error("utils_nested::testEchoBooleanFunction not loaded")
  def utils_fs_getCacheDirectoryForDownloads(_opts \\ []), do: :erlang.nif_error("utils_fs::getCacheDirectoryForDownloads not loaded")
  def detail_BestOf2NearestMatcher_create(_opts \\ []), do: :erlang.nif_error("detail::BestOf2NearestMatcher_create not loaded")
  def detail_Blender_createDefault(_opts \\ []), do: :erlang.nif_error("detail::Blender_createDefault not loaded")
  def detail_ExposureCompensator_createDefault(_opts \\ []), do: :erlang.nif_error("detail::ExposureCompensator_createDefault not loaded")
  def detail_SeamFinder_createDefault(_opts \\ []), do: :erlang.nif_error("detail::SeamFinder_createDefault not loaded")
  def detail_Timelapser_createDefault(_opts \\ []), do: :erlang.nif_error("detail::Timelapser_createDefault not loaded")
  def detail_calibrateRotatingCamera(_opts \\ []), do: :erlang.nif_error("detail::calibrateRotatingCamera not loaded")
  def detail_computeImageFeatures(_opts \\ []), do: :erlang.nif_error("detail::computeImageFeatures not loaded")
  def detail_computeImageFeatures2(_opts \\ []), do: :erlang.nif_error("detail::computeImageFeatures2 not loaded")
  def detail_createLaplacePyr(_opts \\ []), do: :erlang.nif_error("detail::createLaplacePyr not loaded")
  def detail_createLaplacePyrGpu(_opts \\ []), do: :erlang.nif_error("detail::createLaplacePyrGpu not loaded")
  def detail_createWeightMap(_opts \\ []), do: :erlang.nif_error("detail::createWeightMap not loaded")
  def detail_focalsFromHomography(_opts \\ []), do: :erlang.nif_error("detail::focalsFromHomography not loaded")
  def detail_leaveBiggestComponent(_opts \\ []), do: :erlang.nif_error("detail::leaveBiggestComponent not loaded")
  def detail_matchesGraphAsString(_opts \\ []), do: :erlang.nif_error("detail::matchesGraphAsString not loaded")
  def detail_normalizeUsingWeightMap(_opts \\ []), do: :erlang.nif_error("detail::normalizeUsingWeightMap not loaded")
  def detail_overlapRoi(_opts \\ []), do: :erlang.nif_error("detail::overlapRoi not loaded")
  def detail_restoreImageFromLaplacePyr(_opts \\ []), do: :erlang.nif_error("detail::restoreImageFromLaplacePyr not loaded")
  def detail_restoreImageFromLaplacePyrGpu(_opts \\ []), do: :erlang.nif_error("detail::restoreImageFromLaplacePyrGpu not loaded")
  def detail_resultRoi(_opts \\ []), do: :erlang.nif_error("detail::resultRoi not loaded")
  def detail_resultRoiIntersection(_opts \\ []), do: :erlang.nif_error("detail::resultRoiIntersection not loaded")
  def detail_resultTl(_opts \\ []), do: :erlang.nif_error("detail::resultTl not loaded")
  def detail_selectRandomSubset(_opts \\ []), do: :erlang.nif_error("detail::selectRandomSubset not loaded")
  def detail_stitchingLogLevel(_opts \\ []), do: :erlang.nif_error("detail::stitchingLogLevel not loaded")
  def detail_waveCorrect(_opts \\ []), do: :erlang.nif_error("detail::waveCorrect not loaded")
  def cuda_Event_elapsedTime(_opts \\ []), do: :erlang.nif_error("cuda::Event_elapsedTime not loaded")
  def cuda_GpuMat_defaultAllocator(_opts \\ []), do: :erlang.nif_error("cuda::GpuMat_defaultAllocator not loaded")
  def cuda_GpuMat_setDefaultAllocator(_opts \\ []), do: :erlang.nif_error("cuda::GpuMat_setDefaultAllocator not loaded")
  def cuda_Stream_Null(_opts \\ []), do: :erlang.nif_error("cuda::Stream_Null not loaded")
  def cuda_TargetArchs_has(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_has not loaded")
  def cuda_TargetArchs_hasBin(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasBin not loaded")
  def cuda_TargetArchs_hasEqualOrGreater(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasEqualOrGreater not loaded")
  def cuda_TargetArchs_hasEqualOrGreaterBin(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasEqualOrGreaterBin not loaded")
  def cuda_TargetArchs_hasEqualOrGreaterPtx(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasEqualOrGreaterPtx not loaded")
  def cuda_TargetArchs_hasEqualOrLessPtx(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasEqualOrLessPtx not loaded")
  def cuda_TargetArchs_hasPtx(_opts \\ []), do: :erlang.nif_error("cuda::TargetArchs_hasPtx not loaded")
  def cuda_createContinuous(_opts \\ []), do: :erlang.nif_error("cuda::createContinuous not loaded")
  def cuda_ensureSizeIsEnough(_opts \\ []), do: :erlang.nif_error("cuda::ensureSizeIsEnough not loaded")
  def cuda_getCudaEnabledDeviceCount(_opts \\ []), do: :erlang.nif_error("cuda::getCudaEnabledDeviceCount not loaded")
  def cuda_getDevice(_opts \\ []), do: :erlang.nif_error("cuda::getDevice not loaded")
  def cuda_printCudaDeviceInfo(_opts \\ []), do: :erlang.nif_error("cuda::printCudaDeviceInfo not loaded")
  def cuda_printShortCudaDeviceInfo(_opts \\ []), do: :erlang.nif_error("cuda::printShortCudaDeviceInfo not loaded")
  def cuda_registerPageLocked(_opts \\ []), do: :erlang.nif_error("cuda::registerPageLocked not loaded")
  def cuda_resetDevice(_opts \\ []), do: :erlang.nif_error("cuda::resetDevice not loaded")
  def cuda_setBufferPoolConfig(_opts \\ []), do: :erlang.nif_error("cuda::setBufferPoolConfig not loaded")
  def cuda_setBufferPoolUsage(_opts \\ []), do: :erlang.nif_error("cuda::setBufferPoolUsage not loaded")
  def cuda_setDevice(_opts \\ []), do: :erlang.nif_error("cuda::setDevice not loaded")
  def cuda_unregisterPageLocked(_opts \\ []), do: :erlang.nif_error("cuda::unregisterPageLocked not loaded")
  def ocl_Device_getDefault(_opts \\ []), do: :erlang.nif_error("ocl::Device_getDefault not loaded")
  def ocl_finish(_opts \\ []), do: :erlang.nif_error("ocl::finish not loaded")
  def ocl_haveAmdBlas(_opts \\ []), do: :erlang.nif_error("ocl::haveAmdBlas not loaded")
  def ocl_haveAmdFft(_opts \\ []), do: :erlang.nif_error("ocl::haveAmdFft not loaded")
  def ocl_haveOpenCL(_opts \\ []), do: :erlang.nif_error("ocl::haveOpenCL not loaded")
  def ocl_setUseOpenCL(_opts \\ []), do: :erlang.nif_error("ocl::setUseOpenCL not loaded")
  def ocl_useOpenCL(_opts \\ []), do: :erlang.nif_error("ocl::useOpenCL not loaded")
  def parallel_setParallelForBackend(_opts \\ []), do: :erlang.nif_error("parallel::setParallelForBackend not loaded")
  def samples_addSamplesDataSearchPath(_opts \\ []), do: :erlang.nif_error("samples::addSamplesDataSearchPath not loaded")
  def samples_addSamplesDataSearchSubDirectory(_opts \\ []), do: :erlang.nif_error("samples::addSamplesDataSearchSubDirectory not loaded")
  def samples_findFile(_opts \\ []), do: :erlang.nif_error("samples::findFile not loaded")
  def samples_findFileOrKeep(_opts \\ []), do: :erlang.nif_error("samples::findFileOrKeep not loaded")
  def ml_ANN_MLP_create(_opts \\ []), do: :erlang.nif_error("ml::ANN_MLP_create not loaded")
  def ml_ANN_MLP_load(_opts \\ []), do: :erlang.nif_error("ml::ANN_MLP_load not loaded")
  def ml_Boost_create(_opts \\ []), do: :erlang.nif_error("ml::Boost_create not loaded")
  def ml_Boost_load(_opts \\ []), do: :erlang.nif_error("ml::Boost_load not loaded")
  def ml_DTrees_create(_opts \\ []), do: :erlang.nif_error("ml::DTrees_create not loaded")
  def ml_DTrees_load(_opts \\ []), do: :erlang.nif_error("ml::DTrees_load not loaded")
  def ml_EM_create(_opts \\ []), do: :erlang.nif_error("ml::EM_create not loaded")
  def ml_EM_load(_opts \\ []), do: :erlang.nif_error("ml::EM_load not loaded")
  def ml_KNearest_create(_opts \\ []), do: :erlang.nif_error("ml::KNearest_create not loaded")
  def ml_KNearest_load(_opts \\ []), do: :erlang.nif_error("ml::KNearest_load not loaded")
  def ml_LogisticRegression_create(_opts \\ []), do: :erlang.nif_error("ml::LogisticRegression_create not loaded")
  def ml_LogisticRegression_load(_opts \\ []), do: :erlang.nif_error("ml::LogisticRegression_load not loaded")
  def ml_NormalBayesClassifier_create(_opts \\ []), do: :erlang.nif_error("ml::NormalBayesClassifier_create not loaded")
  def ml_NormalBayesClassifier_load(_opts \\ []), do: :erlang.nif_error("ml::NormalBayesClassifier_load not loaded")
  def ml_ParamGrid_create(_opts \\ []), do: :erlang.nif_error("ml::ParamGrid_create not loaded")
  def ml_RTrees_create(_opts \\ []), do: :erlang.nif_error("ml::RTrees_create not loaded")
  def ml_RTrees_load(_opts \\ []), do: :erlang.nif_error("ml::RTrees_load not loaded")
  def ml_SVMSGD_create(_opts \\ []), do: :erlang.nif_error("ml::SVMSGD_create not loaded")
  def ml_SVMSGD_load(_opts \\ []), do: :erlang.nif_error("ml::SVMSGD_load not loaded")
  def ml_SVM_create(_opts \\ []), do: :erlang.nif_error("ml::SVM_create not loaded")
  def ml_SVM_getDefaultGridPtr(_opts \\ []), do: :erlang.nif_error("ml::SVM_getDefaultGridPtr not loaded")
  def ml_SVM_load(_opts \\ []), do: :erlang.nif_error("ml::SVM_load not loaded")
  def ml_TrainData_create(_opts \\ []), do: :erlang.nif_error("ml::TrainData_create not loaded")
  def ml_TrainData_getSubMatrix(_opts \\ []), do: :erlang.nif_error("ml::TrainData_getSubMatrix not loaded")
  def ml_TrainData_getSubVector(_opts \\ []), do: :erlang.nif_error("ml::TrainData_getSubVector not loaded")
  def dnn_NMSBoxes(_opts \\ []), do: :erlang.nif_error("dnn::NMSBoxes not loaded")
  def dnn_NMSBoxesRotated(_opts \\ []), do: :erlang.nif_error("dnn::NMSBoxesRotated not loaded")
  def dnn_Net_readFromModelOptimizer(_opts \\ []), do: :erlang.nif_error("dnn::Net_readFromModelOptimizer not loaded")
  def dnn_blobFromImage(_opts \\ []), do: :erlang.nif_error("dnn::blobFromImage not loaded")
  def dnn_blobFromImages(_opts \\ []), do: :erlang.nif_error("dnn::blobFromImages not loaded")
  def dnn_getAvailableTargets(_opts \\ []), do: :erlang.nif_error("dnn::getAvailableTargets not loaded")
  def dnn_imagesFromBlob(_opts \\ []), do: :erlang.nif_error("dnn::imagesFromBlob not loaded")
  def dnn_readNet(_opts \\ []), do: :erlang.nif_error("dnn::readNet not loaded")
  def dnn_readNetFromCaffe(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromCaffe not loaded")
  def dnn_readNetFromDarknet(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromDarknet not loaded")
  def dnn_readNetFromModelOptimizer(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromModelOptimizer not loaded")
  def dnn_readNetFromONNX(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromONNX not loaded")
  def dnn_readNetFromTensorflow(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromTensorflow not loaded")
  def dnn_readNetFromTorch(_opts \\ []), do: :erlang.nif_error("dnn::readNetFromTorch not loaded")
  def dnn_readTensorFromONNX(_opts \\ []), do: :erlang.nif_error("dnn::readTensorFromONNX not loaded")
  def dnn_readTorchBlob(_opts \\ []), do: :erlang.nif_error("dnn::readTorchBlob not loaded")
  def dnn_shrinkCaffeModel(_opts \\ []), do: :erlang.nif_error("dnn::shrinkCaffeModel not loaded")
  def dnn_softNMSBoxes(_opts \\ []), do: :erlang.nif_error("dnn::softNMSBoxes not loaded")
  def dnn_writeTextGraph(_opts \\ []), do: :erlang.nif_error("dnn::writeTextGraph not loaded")
  def videoio_registry_getBackendName(_opts \\ []), do: :erlang.nif_error("videoio_registry::getBackendName not loaded")
  def videoio_registry_getBackends(_opts \\ []), do: :erlang.nif_error("videoio_registry::getBackends not loaded")
  def videoio_registry_getCameraBackendPluginVersion(_opts \\ []), do: :erlang.nif_error("videoio_registry::getCameraBackendPluginVersion not loaded")
  def videoio_registry_getCameraBackends(_opts \\ []), do: :erlang.nif_error("videoio_registry::getCameraBackends not loaded")
  def videoio_registry_getStreamBackendPluginVersion(_opts \\ []), do: :erlang.nif_error("videoio_registry::getStreamBackendPluginVersion not loaded")
  def videoio_registry_getStreamBackends(_opts \\ []), do: :erlang.nif_error("videoio_registry::getStreamBackends not loaded")
  def videoio_registry_getWriterBackendPluginVersion(_opts \\ []), do: :erlang.nif_error("videoio_registry::getWriterBackendPluginVersion not loaded")
  def videoio_registry_getWriterBackends(_opts \\ []), do: :erlang.nif_error("videoio_registry::getWriterBackends not loaded")
  def videoio_registry_hasBackend(_opts \\ []), do: :erlang.nif_error("videoio_registry::hasBackend not loaded")
  def videoio_registry_isBackendBuiltIn(_opts \\ []), do: :erlang.nif_error("videoio_registry::isBackendBuiltIn not loaded")
  def fisheye_calibrate(_opts \\ []), do: :erlang.nif_error("fisheye::calibrate not loaded")
  def fisheye_distortPoints(_opts \\ []), do: :erlang.nif_error("fisheye::distortPoints not loaded")
  def fisheye_estimateNewCameraMatrixForUndistortRectify(_opts \\ []), do: :erlang.nif_error("fisheye::estimateNewCameraMatrixForUndistortRectify not loaded")
  def fisheye_initUndistortRectifyMap(_opts \\ []), do: :erlang.nif_error("fisheye::initUndistortRectifyMap not loaded")
  def fisheye_projectPoints(_opts \\ []), do: :erlang.nif_error("fisheye::projectPoints not loaded")
  def fisheye_stereoCalibrate(_opts \\ []), do: :erlang.nif_error("fisheye::stereoCalibrate not loaded")
  def fisheye_stereoRectify(_opts \\ []), do: :erlang.nif_error("fisheye::stereoRectify not loaded")
  def fisheye_undistortImage(_opts \\ []), do: :erlang.nif_error("fisheye::undistortImage not loaded")
  def fisheye_undistortPoints(_opts \\ []), do: :erlang.nif_error("fisheye::undistortPoints not loaded")
  def akaze_create(_opts \\ []), do: :erlang.nif_error("cv::AKAZE_create not loaded")
  def affineFeature_create(_opts \\ []), do: :erlang.nif_error("cv::AffineFeature_create not loaded")
  def agastFeatureDetector_create(_opts \\ []), do: :erlang.nif_error("cv::AgastFeatureDetector_create not loaded")
  def bfMatcher_create(_opts \\ []), do: :erlang.nif_error("cv::BFMatcher_create not loaded")
  def brisk_create(_opts \\ []), do: :erlang.nif_error("cv::BRISK_create not loaded")
  def camShift(_opts \\ []), do: :erlang.nif_error("cv::CamShift not loaded")
  def canny(_opts \\ []), do: :erlang.nif_error("cv::Canny not loaded")
  def cascadeClassifier_convert(_opts \\ []), do: :erlang.nif_error("cv::CascadeClassifier_convert not loaded")
  def disOpticalFlow_create(_opts \\ []), do: :erlang.nif_error("cv::DISOpticalFlow_create not loaded")
  def descriptorMatcher_create(_opts \\ []), do: :erlang.nif_error("cv::DescriptorMatcher_create not loaded")
  def emd(_opts \\ []), do: :erlang.nif_error("cv::EMD not loaded")
  def faceDetectorYN_create(_opts \\ []), do: :erlang.nif_error("cv::FaceDetectorYN_create not loaded")
  def faceRecognizerSF_create(_opts \\ []), do: :erlang.nif_error("cv::FaceRecognizerSF_create not loaded")
  def farnebackOpticalFlow_create(_opts \\ []), do: :erlang.nif_error("cv::FarnebackOpticalFlow_create not loaded")
  def fastFeatureDetector_create(_opts \\ []), do: :erlang.nif_error("cv::FastFeatureDetector_create not loaded")
  def flannBasedMatcher_create(_opts \\ []), do: :erlang.nif_error("cv::FlannBasedMatcher_create not loaded")
  def gfttDetector_create(_opts \\ []), do: :erlang.nif_error("cv::GFTTDetector_create not loaded")
  def gaussianBlur(_opts \\ []), do: :erlang.nif_error("cv::GaussianBlur not loaded")
  def hogDescriptor_getDaimlerPeopleDetector(_opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor_getDaimlerPeopleDetector not loaded")
  def hogDescriptor_getDefaultPeopleDetector(_opts \\ []), do: :erlang.nif_error("cv::HOGDescriptor_getDefaultPeopleDetector not loaded")
  def houghCircles(_opts \\ []), do: :erlang.nif_error("cv::HoughCircles not loaded")
  def houghLines(_opts \\ []), do: :erlang.nif_error("cv::HoughLines not loaded")
  def houghLinesP(_opts \\ []), do: :erlang.nif_error("cv::HoughLinesP not loaded")
  def houghLinesPointSet(_opts \\ []), do: :erlang.nif_error("cv::HoughLinesPointSet not loaded")
  def houghLinesWithAccumulator(_opts \\ []), do: :erlang.nif_error("cv::HoughLinesWithAccumulator not loaded")
  def huMoments(_opts \\ []), do: :erlang.nif_error("cv::HuMoments not loaded")
  def kaze_create(_opts \\ []), do: :erlang.nif_error("cv::KAZE_create not loaded")
  def keyPoint_convert(_opts \\ []), do: :erlang.nif_error("cv::KeyPoint_convert not loaded")
  def keyPoint_overlap(_opts \\ []), do: :erlang.nif_error("cv::KeyPoint_overlap not loaded")
  def lut(_opts \\ []), do: :erlang.nif_error("cv::LUT not loaded")
  def laplacian(_opts \\ []), do: :erlang.nif_error("cv::Laplacian not loaded")
  def mser_create(_opts \\ []), do: :erlang.nif_error("cv::MSER_create not loaded")
  def mahalanobis(_opts \\ []), do: :erlang.nif_error("cv::Mahalanobis not loaded")
  def orb_create(_opts \\ []), do: :erlang.nif_error("cv::ORB_create not loaded")
  def pcaBackProject(_opts \\ []), do: :erlang.nif_error("cv::PCABackProject not loaded")
  def pcaCompute(_opts \\ []), do: :erlang.nif_error("cv::PCACompute not loaded")
  def pcaCompute2(_opts \\ []), do: :erlang.nif_error("cv::PCACompute2 not loaded")
  def pcaProject(_opts \\ []), do: :erlang.nif_error("cv::PCAProject not loaded")
  def psnr(_opts \\ []), do: :erlang.nif_error("cv::PSNR not loaded")
  def qrCodeEncoder_create(_opts \\ []), do: :erlang.nif_error("cv::QRCodeEncoder_create not loaded")
  def rqDecomp3x3(_opts \\ []), do: :erlang.nif_error("cv::RQDecomp3x3 not loaded")
  def rodrigues(_opts \\ []), do: :erlang.nif_error("cv::Rodrigues not loaded")
  def sift_create(_opts \\ []), do: :erlang.nif_error("cv::SIFT_create not loaded")
  def svBackSubst(_opts \\ []), do: :erlang.nif_error("cv::SVBackSubst not loaded")
  def svdDecomp(_opts \\ []), do: :erlang.nif_error("cv::SVDecomp not loaded")
  def scharr(_opts \\ []), do: :erlang.nif_error("cv::Scharr not loaded")
  def simpleBlobDetector_create(_opts \\ []), do: :erlang.nif_error("cv::SimpleBlobDetector_create not loaded")
  def sobel(_opts \\ []), do: :erlang.nif_error("cv::Sobel not loaded")
  def sparsePyrLKOpticalFlow_create(_opts \\ []), do: :erlang.nif_error("cv::SparsePyrLKOpticalFlow_create not loaded")
  def stereoBM_create(_opts \\ []), do: :erlang.nif_error("cv::StereoBM_create not loaded")
  def stereoSGBM_create(_opts \\ []), do: :erlang.nif_error("cv::StereoSGBM_create not loaded")
  def stitcher_create(_opts \\ []), do: :erlang.nif_error("cv::Stitcher_create not loaded")
  def trackerDaSiamRPN_create(_opts \\ []), do: :erlang.nif_error("cv::TrackerDaSiamRPN_create not loaded")
  def trackerGOTURN_create(_opts \\ []), do: :erlang.nif_error("cv::TrackerGOTURN_create not loaded")
  def trackerMIL_create(_opts \\ []), do: :erlang.nif_error("cv::TrackerMIL_create not loaded")
  def uMat_context(_opts \\ []), do: :erlang.nif_error("cv::UMat_context not loaded")
  def uMat_queue(_opts \\ []), do: :erlang.nif_error("cv::UMat_queue not loaded")
  def variationalRefinement_create(_opts \\ []), do: :erlang.nif_error("cv::VariationalRefinement_create not loaded")
  def videoWriter_fourcc(_opts \\ []), do: :erlang.nif_error("cv::VideoWriter_fourcc not loaded")
  def absdiff(_opts \\ []), do: :erlang.nif_error("cv::absdiff not loaded")
  def accumulate(_opts \\ []), do: :erlang.nif_error("cv::accumulate not loaded")
  def accumulateProduct(_opts \\ []), do: :erlang.nif_error("cv::accumulateProduct not loaded")
  def accumulateSquare(_opts \\ []), do: :erlang.nif_error("cv::accumulateSquare not loaded")
  def accumulateWeighted(_opts \\ []), do: :erlang.nif_error("cv::accumulateWeighted not loaded")
  def adaptiveThreshold(_opts \\ []), do: :erlang.nif_error("cv::adaptiveThreshold not loaded")
  def add(_opts \\ []), do: :erlang.nif_error("cv::add not loaded")
  def addText(_opts \\ []), do: :erlang.nif_error("cv::addText not loaded")
  def addWeighted(_opts \\ []), do: :erlang.nif_error("cv::addWeighted not loaded")
  def applyColorMap(_opts \\ []), do: :erlang.nif_error("cv::applyColorMap not loaded")
  def approxPolyDP(_opts \\ []), do: :erlang.nif_error("cv::approxPolyDP not loaded")
  def arcLength(_opts \\ []), do: :erlang.nif_error("cv::arcLength not loaded")
  def arrowedLine(_opts \\ []), do: :erlang.nif_error("cv::arrowedLine not loaded")
  def batchDistance(_opts \\ []), do: :erlang.nif_error("cv::batchDistance not loaded")
  def bilateralFilter(_opts \\ []), do: :erlang.nif_error("cv::bilateralFilter not loaded")
  def bitwise_and(_opts \\ []), do: :erlang.nif_error("cv::bitwise_and not loaded")
  def bitwise_not(_opts \\ []), do: :erlang.nif_error("cv::bitwise_not not loaded")
  def bitwise_or(_opts \\ []), do: :erlang.nif_error("cv::bitwise_or not loaded")
  def bitwise_xor(_opts \\ []), do: :erlang.nif_error("cv::bitwise_xor not loaded")
  def blendLinear(_opts \\ []), do: :erlang.nif_error("cv::blendLinear not loaded")
  def blur(_opts \\ []), do: :erlang.nif_error("cv::blur not loaded")
  def borderInterpolate(_opts \\ []), do: :erlang.nif_error("cv::borderInterpolate not loaded")
  def boundingRect(_opts \\ []), do: :erlang.nif_error("cv::boundingRect not loaded")
  def boxFilter(_opts \\ []), do: :erlang.nif_error("cv::boxFilter not loaded")
  def boxPoints(_opts \\ []), do: :erlang.nif_error("cv::boxPoints not loaded")
  def buildOpticalFlowPyramid(_opts \\ []), do: :erlang.nif_error("cv::buildOpticalFlowPyramid not loaded")
  def calcBackProject(_opts \\ []), do: :erlang.nif_error("cv::calcBackProject not loaded")
  def calcCovarMatrix(_opts \\ []), do: :erlang.nif_error("cv::calcCovarMatrix not loaded")
  def calcHist(_opts \\ []), do: :erlang.nif_error("cv::calcHist not loaded")
  def calcOpticalFlowFarneback(_opts \\ []), do: :erlang.nif_error("cv::calcOpticalFlowFarneback not loaded")
  def calcOpticalFlowPyrLK(_opts \\ []), do: :erlang.nif_error("cv::calcOpticalFlowPyrLK not loaded")
  def calibrateCamera(_opts \\ []), do: :erlang.nif_error("cv::calibrateCamera not loaded")
  def calibrateCameraExtended(_opts \\ []), do: :erlang.nif_error("cv::calibrateCameraExtended not loaded")
  def calibrateCameraRO(_opts \\ []), do: :erlang.nif_error("cv::calibrateCameraRO not loaded")
  def calibrateCameraROExtended(_opts \\ []), do: :erlang.nif_error("cv::calibrateCameraROExtended not loaded")
  def calibrateHandEye(_opts \\ []), do: :erlang.nif_error("cv::calibrateHandEye not loaded")
  def calibrateRobotWorldHandEye(_opts \\ []), do: :erlang.nif_error("cv::calibrateRobotWorldHandEye not loaded")
  def calibrationMatrixValues(_opts \\ []), do: :erlang.nif_error("cv::calibrationMatrixValues not loaded")
  def cartToPolar(_opts \\ []), do: :erlang.nif_error("cv::cartToPolar not loaded")
  def checkChessboard(_opts \\ []), do: :erlang.nif_error("cv::checkChessboard not loaded")
  def checkHardwareSupport(_opts \\ []), do: :erlang.nif_error("cv::checkHardwareSupport not loaded")
  def checkRange(_opts \\ []), do: :erlang.nif_error("cv::checkRange not loaded")
  def circle(_opts \\ []), do: :erlang.nif_error("cv::circle not loaded")
  def clipLine(_opts \\ []), do: :erlang.nif_error("cv::clipLine not loaded")
  def colorChange(_opts \\ []), do: :erlang.nif_error("cv::colorChange not loaded")
  def compare(_opts \\ []), do: :erlang.nif_error("cv::compare not loaded")
  def compareHist(_opts \\ []), do: :erlang.nif_error("cv::compareHist not loaded")
  def completeSymm(_opts \\ []), do: :erlang.nif_error("cv::completeSymm not loaded")
  def composeRT(_opts \\ []), do: :erlang.nif_error("cv::composeRT not loaded")
  def computeCorrespondEpilines(_opts \\ []), do: :erlang.nif_error("cv::computeCorrespondEpilines not loaded")
  def computeECC(_opts \\ []), do: :erlang.nif_error("cv::computeECC not loaded")
  def connectedComponents(_opts \\ []), do: :erlang.nif_error("cv::connectedComponents not loaded")
  def connectedComponentsWithAlgorithm(_opts \\ []), do: :erlang.nif_error("cv::connectedComponentsWithAlgorithm not loaded")
  def connectedComponentsWithStats(_opts \\ []), do: :erlang.nif_error("cv::connectedComponentsWithStats not loaded")
  def connectedComponentsWithStatsWithAlgorithm(_opts \\ []), do: :erlang.nif_error("cv::connectedComponentsWithStatsWithAlgorithm not loaded")
  def contourArea(_opts \\ []), do: :erlang.nif_error("cv::contourArea not loaded")
  def convertFp16(_opts \\ []), do: :erlang.nif_error("cv::convertFp16 not loaded")
  def convertMaps(_opts \\ []), do: :erlang.nif_error("cv::convertMaps not loaded")
  def convertPointsFromHomogeneous(_opts \\ []), do: :erlang.nif_error("cv::convertPointsFromHomogeneous not loaded")
  def convertPointsToHomogeneous(_opts \\ []), do: :erlang.nif_error("cv::convertPointsToHomogeneous not loaded")
  def convertScaleAbs(_opts \\ []), do: :erlang.nif_error("cv::convertScaleAbs not loaded")
  def convexHull(_opts \\ []), do: :erlang.nif_error("cv::convexHull not loaded")
  def convexityDefects(_opts \\ []), do: :erlang.nif_error("cv::convexityDefects not loaded")
  def copyMakeBorder(_opts \\ []), do: :erlang.nif_error("cv::copyMakeBorder not loaded")
  def copyTo(_opts \\ []), do: :erlang.nif_error("cv::copyTo not loaded")
  def cornerEigenValsAndVecs(_opts \\ []), do: :erlang.nif_error("cv::cornerEigenValsAndVecs not loaded")
  def cornerHarris(_opts \\ []), do: :erlang.nif_error("cv::cornerHarris not loaded")
  def cornerMinEigenVal(_opts \\ []), do: :erlang.nif_error("cv::cornerMinEigenVal not loaded")
  def cornerSubPix(_opts \\ []), do: :erlang.nif_error("cv::cornerSubPix not loaded")
  def correctMatches(_opts \\ []), do: :erlang.nif_error("cv::correctMatches not loaded")
  def countNonZero(_opts \\ []), do: :erlang.nif_error("cv::countNonZero not loaded")
  def createAlignMTB(_opts \\ []), do: :erlang.nif_error("cv::createAlignMTB not loaded")
  def createBackgroundSubtractorKNN(_opts \\ []), do: :erlang.nif_error("cv::createBackgroundSubtractorKNN not loaded")
  def createBackgroundSubtractorMOG2(_opts \\ []), do: :erlang.nif_error("cv::createBackgroundSubtractorMOG2 not loaded")
  def createCLAHE(_opts \\ []), do: :erlang.nif_error("cv::createCLAHE not loaded")
  def createCalibrateDebevec(_opts \\ []), do: :erlang.nif_error("cv::createCalibrateDebevec not loaded")
  def createCalibrateRobertson(_opts \\ []), do: :erlang.nif_error("cv::createCalibrateRobertson not loaded")
  def createGeneralizedHoughBallard(_opts \\ []), do: :erlang.nif_error("cv::createGeneralizedHoughBallard not loaded")
  def createGeneralizedHoughGuil(_opts \\ []), do: :erlang.nif_error("cv::createGeneralizedHoughGuil not loaded")
  def createHanningWindow(_opts \\ []), do: :erlang.nif_error("cv::createHanningWindow not loaded")
  def createLineSegmentDetector(_opts \\ []), do: :erlang.nif_error("cv::createLineSegmentDetector not loaded")
  def createMergeDebevec(_opts \\ []), do: :erlang.nif_error("cv::createMergeDebevec not loaded")
  def createMergeMertens(_opts \\ []), do: :erlang.nif_error("cv::createMergeMertens not loaded")
  def createMergeRobertson(_opts \\ []), do: :erlang.nif_error("cv::createMergeRobertson not loaded")
  def createTonemap(_opts \\ []), do: :erlang.nif_error("cv::createTonemap not loaded")
  def createTonemapDrago(_opts \\ []), do: :erlang.nif_error("cv::createTonemapDrago not loaded")
  def createTonemapMantiuk(_opts \\ []), do: :erlang.nif_error("cv::createTonemapMantiuk not loaded")
  def createTonemapReinhard(_opts \\ []), do: :erlang.nif_error("cv::createTonemapReinhard not loaded")
  def cubeRoot(_opts \\ []), do: :erlang.nif_error("cv::cubeRoot not loaded")
  def cvtColor(_opts \\ []), do: :erlang.nif_error("cv::cvtColor not loaded")
  def cvtColorTwoPlane(_opts \\ []), do: :erlang.nif_error("cv::cvtColorTwoPlane not loaded")
  def dct(_opts \\ []), do: :erlang.nif_error("cv::dct not loaded")
  def decolor(_opts \\ []), do: :erlang.nif_error("cv::decolor not loaded")
  def decomposeEssentialMat(_opts \\ []), do: :erlang.nif_error("cv::decomposeEssentialMat not loaded")
  def decomposeHomographyMat(_opts \\ []), do: :erlang.nif_error("cv::decomposeHomographyMat not loaded")
  def decomposeProjectionMatrix(_opts \\ []), do: :erlang.nif_error("cv::decomposeProjectionMatrix not loaded")
  def demosaicing(_opts \\ []), do: :erlang.nif_error("cv::demosaicing not loaded")
  def denoise_TVL1(_opts \\ []), do: :erlang.nif_error("cv::denoise_TVL1 not loaded")
  def detailEnhance(_opts \\ []), do: :erlang.nif_error("cv::detailEnhance not loaded")
  def determinant(_opts \\ []), do: :erlang.nif_error("cv::determinant not loaded")
  def dft(_opts \\ []), do: :erlang.nif_error("cv::dft not loaded")
  def dilate(_opts \\ []), do: :erlang.nif_error("cv::dilate not loaded")
  def displayOverlay(_opts \\ []), do: :erlang.nif_error("cv::displayOverlay not loaded")
  def displayStatusBar(_opts \\ []), do: :erlang.nif_error("cv::displayStatusBar not loaded")
  def distanceTransform(_opts \\ []), do: :erlang.nif_error("cv::distanceTransform not loaded")
  def distanceTransformWithLabels(_opts \\ []), do: :erlang.nif_error("cv::distanceTransformWithLabels not loaded")
  def divSpectrums(_opts \\ []), do: :erlang.nif_error("cv::divSpectrums not loaded")
  def divide(_opts \\ []), do: :erlang.nif_error("cv::divide not loaded")
  def drawChessboardCorners(_opts \\ []), do: :erlang.nif_error("cv::drawChessboardCorners not loaded")
  def drawContours(_opts \\ []), do: :erlang.nif_error("cv::drawContours not loaded")
  def drawFrameAxes(_opts \\ []), do: :erlang.nif_error("cv::drawFrameAxes not loaded")
  def drawKeypoints(_opts \\ []), do: :erlang.nif_error("cv::drawKeypoints not loaded")
  def drawMarker(_opts \\ []), do: :erlang.nif_error("cv::drawMarker not loaded")
  def drawMatches(_opts \\ []), do: :erlang.nif_error("cv::drawMatches not loaded")
  def drawMatchesKnn(_opts \\ []), do: :erlang.nif_error("cv::drawMatchesKnn not loaded")
  def edgePreservingFilter(_opts \\ []), do: :erlang.nif_error("cv::edgePreservingFilter not loaded")
  def eigen(_opts \\ []), do: :erlang.nif_error("cv::eigen not loaded")
  def eigenNonSymmetric(_opts \\ []), do: :erlang.nif_error("cv::eigenNonSymmetric not loaded")
  def ellipse(_opts \\ []), do: :erlang.nif_error("cv::ellipse not loaded")
  def ellipse2Poly(_opts \\ []), do: :erlang.nif_error("cv::ellipse2Poly not loaded")
  def equalizeHist(_opts \\ []), do: :erlang.nif_error("cv::equalizeHist not loaded")
  def erode(_opts \\ []), do: :erlang.nif_error("cv::erode not loaded")
  def estimateAffine2D(_opts \\ []), do: :erlang.nif_error("cv::estimateAffine2D not loaded")
  def estimateAffine3D(_opts \\ []), do: :erlang.nif_error("cv::estimateAffine3D not loaded")
  def estimateAffinePartial2D(_opts \\ []), do: :erlang.nif_error("cv::estimateAffinePartial2D not loaded")
  def estimateChessboardSharpness(_opts \\ []), do: :erlang.nif_error("cv::estimateChessboardSharpness not loaded")
  def estimateTranslation3D(_opts \\ []), do: :erlang.nif_error("cv::estimateTranslation3D not loaded")
  def exp(_opts \\ []), do: :erlang.nif_error("cv::exp not loaded")
  def extractChannel(_opts \\ []), do: :erlang.nif_error("cv::extractChannel not loaded")
  def fastAtan2(_opts \\ []), do: :erlang.nif_error("cv::fastAtan2 not loaded")
  def fastNlMeansDenoising(_opts \\ []), do: :erlang.nif_error("cv::fastNlMeansDenoising not loaded")
  def fastNlMeansDenoisingColored(_opts \\ []), do: :erlang.nif_error("cv::fastNlMeansDenoisingColored not loaded")
  def fastNlMeansDenoisingColoredMulti(_opts \\ []), do: :erlang.nif_error("cv::fastNlMeansDenoisingColoredMulti not loaded")
  def fastNlMeansDenoisingMulti(_opts \\ []), do: :erlang.nif_error("cv::fastNlMeansDenoisingMulti not loaded")
  def fillConvexPoly(_opts \\ []), do: :erlang.nif_error("cv::fillConvexPoly not loaded")
  def fillPoly(_opts \\ []), do: :erlang.nif_error("cv::fillPoly not loaded")
  def filter2D(_opts \\ []), do: :erlang.nif_error("cv::filter2D not loaded")
  def filterHomographyDecompByVisibleRefpoints(_opts \\ []), do: :erlang.nif_error("cv::filterHomographyDecompByVisibleRefpoints not loaded")
  def filterSpeckles(_opts \\ []), do: :erlang.nif_error("cv::filterSpeckles not loaded")
  def find4QuadCornerSubpix(_opts \\ []), do: :erlang.nif_error("cv::find4QuadCornerSubpix not loaded")
  def findChessboardCorners(_opts \\ []), do: :erlang.nif_error("cv::findChessboardCorners not loaded")
  def findChessboardCornersSB(_opts \\ []), do: :erlang.nif_error("cv::findChessboardCornersSB not loaded")
  def findChessboardCornersSBWithMeta(_opts \\ []), do: :erlang.nif_error("cv::findChessboardCornersSBWithMeta not loaded")
  def findCirclesGrid(_opts \\ []), do: :erlang.nif_error("cv::findCirclesGrid not loaded")
  def findContours(_opts \\ []), do: :erlang.nif_error("cv::findContours not loaded")
  def findEssentialMat(_opts \\ []), do: :erlang.nif_error("cv::findEssentialMat not loaded")
  def findFundamentalMat(_opts \\ []), do: :erlang.nif_error("cv::findFundamentalMat not loaded")
  def findHomography(_opts \\ []), do: :erlang.nif_error("cv::findHomography not loaded")
  def findNonZero(_opts \\ []), do: :erlang.nif_error("cv::findNonZero not loaded")
  def findTransformECC(_opts \\ []), do: :erlang.nif_error("cv::findTransformECC not loaded")
  def fitEllipse(_opts \\ []), do: :erlang.nif_error("cv::fitEllipse not loaded")
  def fitEllipseAMS(_opts \\ []), do: :erlang.nif_error("cv::fitEllipseAMS not loaded")
  def fitEllipseDirect(_opts \\ []), do: :erlang.nif_error("cv::fitEllipseDirect not loaded")
  def fitLine(_opts \\ []), do: :erlang.nif_error("cv::fitLine not loaded")
  def flip(_opts \\ []), do: :erlang.nif_error("cv::flip not loaded")
  def floodFill(_opts \\ []), do: :erlang.nif_error("cv::floodFill not loaded")
  def gemm(_opts \\ []), do: :erlang.nif_error("cv::gemm not loaded")
  def getAffineTransform(_opts \\ []), do: :erlang.nif_error("cv::getAffineTransform not loaded")
  def getBuildInformation(_opts \\ []), do: :erlang.nif_error("cv::getBuildInformation not loaded")
  def getCPUFeaturesLine(_opts \\ []), do: :erlang.nif_error("cv::getCPUFeaturesLine not loaded")
  def getCPUTickCount(_opts \\ []), do: :erlang.nif_error("cv::getCPUTickCount not loaded")
  def getDefaultNewCameraMatrix(_opts \\ []), do: :erlang.nif_error("cv::getDefaultNewCameraMatrix not loaded")
  def getDerivKernels(_opts \\ []), do: :erlang.nif_error("cv::getDerivKernels not loaded")
  def getFontScaleFromHeight(_opts \\ []), do: :erlang.nif_error("cv::getFontScaleFromHeight not loaded")
  def getGaborKernel(_opts \\ []), do: :erlang.nif_error("cv::getGaborKernel not loaded")
  def getGaussianKernel(_opts \\ []), do: :erlang.nif_error("cv::getGaussianKernel not loaded")
  def getHardwareFeatureName(_opts \\ []), do: :erlang.nif_error("cv::getHardwareFeatureName not loaded")
  def getLogLevel(_opts \\ []), do: :erlang.nif_error("cv::getLogLevel not loaded")
  def getNumThreads(_opts \\ []), do: :erlang.nif_error("cv::getNumThreads not loaded")
  def getNumberOfCPUs(_opts \\ []), do: :erlang.nif_error("cv::getNumberOfCPUs not loaded")
  def getOptimalDFTSize(_opts \\ []), do: :erlang.nif_error("cv::getOptimalDFTSize not loaded")
  def getOptimalNewCameraMatrix(_opts \\ []), do: :erlang.nif_error("cv::getOptimalNewCameraMatrix not loaded")
  def getPerspectiveTransform(_opts \\ []), do: :erlang.nif_error("cv::getPerspectiveTransform not loaded")
  def getRectSubPix(_opts \\ []), do: :erlang.nif_error("cv::getRectSubPix not loaded")
  def getRotationMatrix2D(_opts \\ []), do: :erlang.nif_error("cv::getRotationMatrix2D not loaded")
  def getStructuringElement(_opts \\ []), do: :erlang.nif_error("cv::getStructuringElement not loaded")
  def getTextSize(_opts \\ []), do: :erlang.nif_error("cv::getTextSize not loaded")
  def getThreadNum(_opts \\ []), do: :erlang.nif_error("cv::getThreadNum not loaded")
  def getTickCount(_opts \\ []), do: :erlang.nif_error("cv::getTickCount not loaded")
  def getTickFrequency(_opts \\ []), do: :erlang.nif_error("cv::getTickFrequency not loaded")
  def getTrackbarPos(_opts \\ []), do: :erlang.nif_error("cv::getTrackbarPos not loaded")
  def getValidDisparityROI(_opts \\ []), do: :erlang.nif_error("cv::getValidDisparityROI not loaded")
  def getVersionMajor(_opts \\ []), do: :erlang.nif_error("cv::getVersionMajor not loaded")
  def getVersionMinor(_opts \\ []), do: :erlang.nif_error("cv::getVersionMinor not loaded")
  def getVersionRevision(_opts \\ []), do: :erlang.nif_error("cv::getVersionRevision not loaded")
  def getVersionString(_opts \\ []), do: :erlang.nif_error("cv::getVersionString not loaded")
  def getWindowImageRect(_opts \\ []), do: :erlang.nif_error("cv::getWindowImageRect not loaded")
  def getWindowProperty(_opts \\ []), do: :erlang.nif_error("cv::getWindowProperty not loaded")
  def goodFeaturesToTrack(_opts \\ []), do: :erlang.nif_error("cv::goodFeaturesToTrack not loaded")
  def goodFeaturesToTrackWithQuality(_opts \\ []), do: :erlang.nif_error("cv::goodFeaturesToTrackWithQuality not loaded")
  def grabCut(_opts \\ []), do: :erlang.nif_error("cv::grabCut not loaded")
  def groupRectangles(_opts \\ []), do: :erlang.nif_error("cv::groupRectangles not loaded")
  def haveImageReader(_opts \\ []), do: :erlang.nif_error("cv::haveImageReader not loaded")
  def haveImageWriter(_opts \\ []), do: :erlang.nif_error("cv::haveImageWriter not loaded")
  def haveOpenVX(_opts \\ []), do: :erlang.nif_error("cv::haveOpenVX not loaded")
  def hconcat(_opts \\ []), do: :erlang.nif_error("cv::hconcat not loaded")
  def idct(_opts \\ []), do: :erlang.nif_error("cv::idct not loaded")
  def idft(_opts \\ []), do: :erlang.nif_error("cv::idft not loaded")
  def illuminationChange(_opts \\ []), do: :erlang.nif_error("cv::illuminationChange not loaded")
  def imcount(_opts \\ []), do: :erlang.nif_error("cv::imcount not loaded")
  def imencode(_opts \\ []), do: :erlang.nif_error("cv::imencode not loaded")
  def imread(_opts \\ []), do: :erlang.nif_error("cv::imread not loaded")
  def imreadmulti(_opts \\ []), do: :erlang.nif_error("cv::imreadmulti not loaded")
  def imwrite(_opts \\ []), do: :erlang.nif_error("cv::imwrite not loaded")
  def imwritemulti(_opts \\ []), do: :erlang.nif_error("cv::imwritemulti not loaded")
  def inRange(_opts \\ []), do: :erlang.nif_error("cv::inRange not loaded")
  def initCameraMatrix2D(_opts \\ []), do: :erlang.nif_error("cv::initCameraMatrix2D not loaded")
  def initInverseRectificationMap(_opts \\ []), do: :erlang.nif_error("cv::initInverseRectificationMap not loaded")
  def initUndistortRectifyMap(_opts \\ []), do: :erlang.nif_error("cv::initUndistortRectifyMap not loaded")
  def inpaint(_opts \\ []), do: :erlang.nif_error("cv::inpaint not loaded")
  def insertChannel(_opts \\ []), do: :erlang.nif_error("cv::insertChannel not loaded")
  def integral(_opts \\ []), do: :erlang.nif_error("cv::integral not loaded")
  def integral2(_opts \\ []), do: :erlang.nif_error("cv::integral2 not loaded")
  def integral3(_opts \\ []), do: :erlang.nif_error("cv::integral3 not loaded")
  def intersectConvexConvex(_opts \\ []), do: :erlang.nif_error("cv::intersectConvexConvex not loaded")
  def invert(_opts \\ []), do: :erlang.nif_error("cv::invert not loaded")
  def invertAffineTransform(_opts \\ []), do: :erlang.nif_error("cv::invertAffineTransform not loaded")
  def isContourConvex(_opts \\ []), do: :erlang.nif_error("cv::isContourConvex not loaded")
  def kmeans(_opts \\ []), do: :erlang.nif_error("cv::kmeans not loaded")
  def line(_opts \\ []), do: :erlang.nif_error("cv::line not loaded")
  def linearPolar(_opts \\ []), do: :erlang.nif_error("cv::linearPolar not loaded")
  def log(_opts \\ []), do: :erlang.nif_error("cv::log not loaded")
  def logPolar(_opts \\ []), do: :erlang.nif_error("cv::logPolar not loaded")
  def magnitude(_opts \\ []), do: :erlang.nif_error("cv::magnitude not loaded")
  def matMulDeriv(_opts \\ []), do: :erlang.nif_error("cv::matMulDeriv not loaded")
  def matchShapes(_opts \\ []), do: :erlang.nif_error("cv::matchShapes not loaded")
  def matchTemplate(_opts \\ []), do: :erlang.nif_error("cv::matchTemplate not loaded")
  def max(_opts \\ []), do: :erlang.nif_error("cv::max not loaded")
  def mean(_opts \\ []), do: :erlang.nif_error("cv::mean not loaded")
  def meanShift(_opts \\ []), do: :erlang.nif_error("cv::meanShift not loaded")
  def meanStdDev(_opts \\ []), do: :erlang.nif_error("cv::meanStdDev not loaded")
  def medianBlur(_opts \\ []), do: :erlang.nif_error("cv::medianBlur not loaded")
  def merge(_opts \\ []), do: :erlang.nif_error("cv::merge not loaded")
  def min(_opts \\ []), do: :erlang.nif_error("cv::min not loaded")
  def minAreaRect(_opts \\ []), do: :erlang.nif_error("cv::minAreaRect not loaded")
  def minEnclosingCircle(_opts \\ []), do: :erlang.nif_error("cv::minEnclosingCircle not loaded")
  def minEnclosingTriangle(_opts \\ []), do: :erlang.nif_error("cv::minEnclosingTriangle not loaded")
  def minMaxLoc(_opts \\ []), do: :erlang.nif_error("cv::minMaxLoc not loaded")
  def mixChannels(_opts \\ []), do: :erlang.nif_error("cv::mixChannels not loaded")
  def moments(_opts \\ []), do: :erlang.nif_error("cv::moments not loaded")
  def morphologyEx(_opts \\ []), do: :erlang.nif_error("cv::morphologyEx not loaded")
  def moveWindow(_opts \\ []), do: :erlang.nif_error("cv::moveWindow not loaded")
  def mulSpectrums(_opts \\ []), do: :erlang.nif_error("cv::mulSpectrums not loaded")
  def mulTransposed(_opts \\ []), do: :erlang.nif_error("cv::mulTransposed not loaded")
  def multiply(_opts \\ []), do: :erlang.nif_error("cv::multiply not loaded")
  def namedWindow(_opts \\ []), do: :erlang.nif_error("cv::namedWindow not loaded")
  def norm(_opts \\ []), do: :erlang.nif_error("cv::norm not loaded")
  def normalize(_opts \\ []), do: :erlang.nif_error("cv::normalize not loaded")
  def patchNaNs(_opts \\ []), do: :erlang.nif_error("cv::patchNaNs not loaded")
  def pencilSketch(_opts \\ []), do: :erlang.nif_error("cv::pencilSketch not loaded")
  def perspectiveTransform(_opts \\ []), do: :erlang.nif_error("cv::perspectiveTransform not loaded")
  def phase(_opts \\ []), do: :erlang.nif_error("cv::phase not loaded")
  def phaseCorrelate(_opts \\ []), do: :erlang.nif_error("cv::phaseCorrelate not loaded")
  def pointPolygonTest(_opts \\ []), do: :erlang.nif_error("cv::pointPolygonTest not loaded")
  def polarToCart(_opts \\ []), do: :erlang.nif_error("cv::polarToCart not loaded")
  def pollKey(_opts \\ []), do: :erlang.nif_error("cv::pollKey not loaded")
  def polylines(_opts \\ []), do: :erlang.nif_error("cv::polylines not loaded")
  def pow(_opts \\ []), do: :erlang.nif_error("cv::pow not loaded")
  def preCornerDetect(_opts \\ []), do: :erlang.nif_error("cv::preCornerDetect not loaded")
  def projectPoints(_opts \\ []), do: :erlang.nif_error("cv::projectPoints not loaded")
  def putText(_opts \\ []), do: :erlang.nif_error("cv::putText not loaded")
  def pyrDown(_opts \\ []), do: :erlang.nif_error("cv::pyrDown not loaded")
  def pyrMeanShiftFiltering(_opts \\ []), do: :erlang.nif_error("cv::pyrMeanShiftFiltering not loaded")
  def pyrUp(_opts \\ []), do: :erlang.nif_error("cv::pyrUp not loaded")
  def randShuffle(_opts \\ []), do: :erlang.nif_error("cv::randShuffle not loaded")
  def randn(_opts \\ []), do: :erlang.nif_error("cv::randn not loaded")
  def randu(_opts \\ []), do: :erlang.nif_error("cv::randu not loaded")
  def readOpticalFlow(_opts \\ []), do: :erlang.nif_error("cv::readOpticalFlow not loaded")
  def recoverPose(_opts \\ []), do: :erlang.nif_error("cv::recoverPose not loaded")
  def rectangle(_opts \\ []), do: :erlang.nif_error("cv::rectangle not loaded")
  def rectify3Collinear(_opts \\ []), do: :erlang.nif_error("cv::rectify3Collinear not loaded")
  def reduce(_opts \\ []), do: :erlang.nif_error("cv::reduce not loaded")
  def reduceArgMax(_opts \\ []), do: :erlang.nif_error("cv::reduceArgMax not loaded")
  def reduceArgMin(_opts \\ []), do: :erlang.nif_error("cv::reduceArgMin not loaded")
  def remap(_opts \\ []), do: :erlang.nif_error("cv::remap not loaded")
  def repeat(_opts \\ []), do: :erlang.nif_error("cv::repeat not loaded")
  def reprojectImageTo3D(_opts \\ []), do: :erlang.nif_error("cv::reprojectImageTo3D not loaded")
  def resize(_opts \\ []), do: :erlang.nif_error("cv::resize not loaded")
  def resizeWindow(_opts \\ []), do: :erlang.nif_error("cv::resizeWindow not loaded")
  def rotate(_opts \\ []), do: :erlang.nif_error("cv::rotate not loaded")
  def rotatedRectangleIntersection(_opts \\ []), do: :erlang.nif_error("cv::rotatedRectangleIntersection not loaded")
  def sampsonDistance(_opts \\ []), do: :erlang.nif_error("cv::sampsonDistance not loaded")
  def scaleAdd(_opts \\ []), do: :erlang.nif_error("cv::scaleAdd not loaded")
  def seamlessClone(_opts \\ []), do: :erlang.nif_error("cv::seamlessClone not loaded")
  def selectROI(_opts \\ []), do: :erlang.nif_error("cv::selectROI not loaded")
  def selectROIs(_opts \\ []), do: :erlang.nif_error("cv::selectROIs not loaded")
  def sepFilter2D(_opts \\ []), do: :erlang.nif_error("cv::sepFilter2D not loaded")
  def setIdentity(_opts \\ []), do: :erlang.nif_error("cv::setIdentity not loaded")
  def setLogLevel(_opts \\ []), do: :erlang.nif_error("cv::setLogLevel not loaded")
  def setNumThreads(_opts \\ []), do: :erlang.nif_error("cv::setNumThreads not loaded")
  def setRNGSeed(_opts \\ []), do: :erlang.nif_error("cv::setRNGSeed not loaded")
  def setTrackbarMax(_opts \\ []), do: :erlang.nif_error("cv::setTrackbarMax not loaded")
  def setTrackbarMin(_opts \\ []), do: :erlang.nif_error("cv::setTrackbarMin not loaded")
  def setTrackbarPos(_opts \\ []), do: :erlang.nif_error("cv::setTrackbarPos not loaded")
  def setUseOpenVX(_opts \\ []), do: :erlang.nif_error("cv::setUseOpenVX not loaded")
  def setUseOptimized(_opts \\ []), do: :erlang.nif_error("cv::setUseOptimized not loaded")
  def setWindowProperty(_opts \\ []), do: :erlang.nif_error("cv::setWindowProperty not loaded")
  def setWindowTitle(_opts \\ []), do: :erlang.nif_error("cv::setWindowTitle not loaded")
  def solve(_opts \\ []), do: :erlang.nif_error("cv::solve not loaded")
  def solveCubic(_opts \\ []), do: :erlang.nif_error("cv::solveCubic not loaded")
  def solveLP(_opts \\ []), do: :erlang.nif_error("cv::solveLP not loaded")
  def solveP3P(_opts \\ []), do: :erlang.nif_error("cv::solveP3P not loaded")
  def solvePnP(_opts \\ []), do: :erlang.nif_error("cv::solvePnP not loaded")
  def solvePnPGeneric(_opts \\ []), do: :erlang.nif_error("cv::solvePnPGeneric not loaded")
  def solvePnPRansac(_opts \\ []), do: :erlang.nif_error("cv::solvePnPRansac not loaded")
  def solvePnPRefineLM(_opts \\ []), do: :erlang.nif_error("cv::solvePnPRefineLM not loaded")
  def solvePnPRefineVVS(_opts \\ []), do: :erlang.nif_error("cv::solvePnPRefineVVS not loaded")
  def solvePoly(_opts \\ []), do: :erlang.nif_error("cv::solvePoly not loaded")
  def sort(_opts \\ []), do: :erlang.nif_error("cv::sort not loaded")
  def sortIdx(_opts \\ []), do: :erlang.nif_error("cv::sortIdx not loaded")
  def spatialGradient(_opts \\ []), do: :erlang.nif_error("cv::spatialGradient not loaded")
  def split(_opts \\ []), do: :erlang.nif_error("cv::split not loaded")
  def sqrBoxFilter(_opts \\ []), do: :erlang.nif_error("cv::sqrBoxFilter not loaded")
  def sqrt(_opts \\ []), do: :erlang.nif_error("cv::sqrt not loaded")
  def startWindowThread(_opts \\ []), do: :erlang.nif_error("cv::startWindowThread not loaded")
  def stereoCalibrate(_opts \\ []), do: :erlang.nif_error("cv::stereoCalibrate not loaded")
  def stereoCalibrateExtended(_opts \\ []), do: :erlang.nif_error("cv::stereoCalibrateExtended not loaded")
  def stereoRectify(_opts \\ []), do: :erlang.nif_error("cv::stereoRectify not loaded")
  def stereoRectifyUncalibrated(_opts \\ []), do: :erlang.nif_error("cv::stereoRectifyUncalibrated not loaded")
  def stylization(_opts \\ []), do: :erlang.nif_error("cv::stylization not loaded")
  def subtract(_opts \\ []), do: :erlang.nif_error("cv::subtract not loaded")
  def sumElems(_opts \\ []), do: :erlang.nif_error("cv::sumElems not loaded")
  def textureFlattening(_opts \\ []), do: :erlang.nif_error("cv::textureFlattening not loaded")
  def threshold(_opts \\ []), do: :erlang.nif_error("cv::threshold not loaded")
  def trace(_opts \\ []), do: :erlang.nif_error("cv::trace not loaded")
  def transform(_opts \\ []), do: :erlang.nif_error("cv::transform not loaded")
  def transpose(_opts \\ []), do: :erlang.nif_error("cv::transpose not loaded")
  def transposeND(_opts \\ []), do: :erlang.nif_error("cv::transposeND not loaded")
  def triangulatePoints(_opts \\ []), do: :erlang.nif_error("cv::triangulatePoints not loaded")
  def undistort(_opts \\ []), do: :erlang.nif_error("cv::undistort not loaded")
  def undistortImagePoints(_opts \\ []), do: :erlang.nif_error("cv::undistortImagePoints not loaded")
  def undistortPoints(_opts \\ []), do: :erlang.nif_error("cv::undistortPoints not loaded")
  def undistortPointsIter(_opts \\ []), do: :erlang.nif_error("cv::undistortPointsIter not loaded")
  def useOpenVX(_opts \\ []), do: :erlang.nif_error("cv::useOpenVX not loaded")
  def useOptimized(_opts \\ []), do: :erlang.nif_error("cv::useOptimized not loaded")
  def validateDisparity(_opts \\ []), do: :erlang.nif_error("cv::validateDisparity not loaded")
  def vconcat(_opts \\ []), do: :erlang.nif_error("cv::vconcat not loaded")
  def waitKeyEx(_opts \\ []), do: :erlang.nif_error("cv::waitKeyEx not loaded")
  def warpAffine(_opts \\ []), do: :erlang.nif_error("cv::warpAffine not loaded")
  def warpPerspective(_opts \\ []), do: :erlang.nif_error("cv::warpPerspective not loaded")
  def warpPolar(_opts \\ []), do: :erlang.nif_error("cv::warpPolar not loaded")
  def watershed(_opts \\ []), do: :erlang.nif_error("cv::watershed not loaded")
  def writeOpticalFlow(_opts \\ []), do: :erlang.nif_error("cv::writeOpticalFlow not loaded")

end
